{"version":3,"sources":["../../../src/particles/webgl/ParticleBuffer.js"],"names":["ParticleBuffer","gl","properties","dynamicPropertyFlags","size","vertSize","vertByteSize","dynamicProperties","staticProperties","i","length","property","attribute","uploadFunction","offset","push","staticStride","staticBuffer","staticData","dynamicStride","dynamicBuffer","dynamicData","initBuffers","dynamicOffset","indices","indexBuffer","createIndexBuffer","STATIC_DRAW","Float32Array","createVertexBuffer","STREAM_DRAW","staticOffset","vao","addAttribute","FLOAT","uploadDynamic","children","startIndex","amount","upload","uploadStatic","destroy"],"mappings":"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","file":"ParticleBuffer.js","sourcesContent":["import GLBuffer from '../../core/renderers/webgl/systems/geometry/GLBuffer';\n// import VertexArrayObject from '../../core/renderers/webgl/systems/geometry/VertexArrayObject';\n\nimport createIndicesForQuads from '../../core/utils/createIndicesForQuads';\n\n/**\n * @author Mat Groves\n *\n * Big thanks to the very clever Matt DesLauriers <mattdesl> https://github.com/mattdesl/\n * for creating the original pixi version!\n * Also a thanks to https://github.com/bchevalier for tweaking the tint and alpha so that\n * they now share 4 bytes on the vertex buffer\n *\n * Heavily inspired by LibGDX's ParticleBuffer:\n * https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/graphics/g2d/ParticleBuffer.java\n */\n\n/**\n * The particle buffer manages the static and dynamic buffers for a particle container.\n *\n * @class\n * @private\n * @memberof PIXI\n */\nexport default class ParticleBuffer\n{\n    /**\n     * @param {WebGLRenderingContext} gl - The rendering context.\n     * @param {object} properties - The properties to upload.\n     * @param {boolean[]} dynamicPropertyFlags - Flags for which properties are dynamic.\n     * @param {number} size - The size of the batch.\n     */\n    constructor(gl, properties, dynamicPropertyFlags, size)\n    {\n        /**\n         * The current WebGL drawing context.\n         *\n         * @member {WebGLRenderingContext}\n         */\n        this.gl = gl;\n\n        /**\n         * Size of a single vertex.\n         *\n         * @member {number}\n         */\n        this.vertSize = 2;\n\n        /**\n         * Size of a single vertex in bytes.\n         *\n         * @member {number}\n         */\n        this.vertByteSize = this.vertSize * 4;\n\n        /**\n         * The number of particles the buffer can hold\n         *\n         * @member {number}\n         */\n        this.size = size;\n\n        /**\n         * A list of the properties that are dynamic.\n         *\n         * @member {object[]}\n         */\n        this.dynamicProperties = [];\n\n        /**\n         * A list of the properties that are static.\n         *\n         * @member {object[]}\n         */\n        this.staticProperties = [];\n\n        for (let i = 0; i < properties.length; ++i)\n        {\n            let property = properties[i];\n\n            // Make copy of properties object so that when we edit the offset it doesn't\n            // change all other instances of the object literal\n            property = {\n                attribute: property.attribute,\n                size: property.size,\n                uploadFunction: property.uploadFunction,\n                offset: property.offset,\n            };\n\n            if (dynamicPropertyFlags[i])\n            {\n                this.dynamicProperties.push(property);\n            }\n            else\n            {\n                this.staticProperties.push(property);\n            }\n        }\n\n        this.staticStride = 0;\n        this.staticBuffer = null;\n        this.staticData = null;\n\n        this.dynamicStride = 0;\n        this.dynamicBuffer = null;\n        this.dynamicData = null;\n\n        this.initBuffers();\n    }\n\n    /**\n     * Sets up the renderer context and necessary buffers.\n     *\n     * @private\n     */\n    initBuffers()\n    {\n        const gl = this.gl;\n        let dynamicOffset = 0;\n\n        /**\n         * Holds the indices of the geometry (quads) to draw\n         *\n         * @member {Uint16Array}\n         */\n        this.indices = createIndicesForQuads(this.size);\n        this.indexBuffer = GLBuffer.createIndexBuffer(gl, this.indices, gl.STATIC_DRAW);\n\n        this.dynamicStride = 0;\n\n        for (let i = 0; i < this.dynamicProperties.length; ++i)\n        {\n            const property = this.dynamicProperties[i];\n\n            property.offset = dynamicOffset;\n            dynamicOffset += property.size;\n            this.dynamicStride += property.size;\n        }\n\n        this.dynamicData = new Float32Array(this.size * this.dynamicStride * 4);\n        this.dynamicBuffer = GLBuffer.createVertexBuffer(gl, this.dynamicData, gl.STREAM_DRAW);\n\n        // static //\n        let staticOffset = 0;\n\n        this.staticStride = 0;\n\n        for (let i = 0; i < this.staticProperties.length; ++i)\n        {\n            const property = this.staticProperties[i];\n\n            property.offset = staticOffset;\n            staticOffset += property.size;\n            this.staticStride += property.size;\n        }\n\n        this.staticData = new Float32Array(this.size * this.staticStride * 4);\n        this.staticBuffer = GLBuffer.createVertexBuffer(gl, this.staticData, gl.STATIC_DRAW);\n\n        // this.vao = new VertexArrayObject(gl)\n        // .addIndex(this.indexBuffer);\n\n        for (let i = 0; i < this.dynamicProperties.length; ++i)\n        {\n            const property = this.dynamicProperties[i];\n\n            this.vao.addAttribute(\n                this.dynamicBuffer,\n                property.attribute,\n                gl.FLOAT,\n                false,\n                this.dynamicStride * 4,\n                property.offset * 4\n            );\n        }\n\n        for (let i = 0; i < this.staticProperties.length; ++i)\n        {\n            const property = this.staticProperties[i];\n\n            this.vao.addAttribute(\n                this.staticBuffer,\n                property.attribute,\n                gl.FLOAT,\n                false,\n                this.staticStride * 4,\n                property.offset * 4\n            );\n        }\n    }\n\n    /**\n     * Uploads the dynamic properties.\n     *\n     * @param {PIXI.DisplayObject[]} children - The children to upload.\n     * @param {number} startIndex - The index to start at.\n     * @param {number} amount - The number to upload.\n     */\n    uploadDynamic(children, startIndex, amount)\n    {\n        for (let i = 0; i < this.dynamicProperties.length; i++)\n        {\n            const property = this.dynamicProperties[i];\n\n            property.uploadFunction(children, startIndex, amount, this.dynamicData, this.dynamicStride, property.offset);\n        }\n\n        this.dynamicBuffer.upload();\n    }\n\n    /**\n     * Uploads the static properties.\n     *\n     * @param {PIXI.DisplayObject[]} children - The children to upload.\n     * @param {number} startIndex - The index to start at.\n     * @param {number} amount - The number to upload.\n     */\n    uploadStatic(children, startIndex, amount)\n    {\n        for (let i = 0; i < this.staticProperties.length; i++)\n        {\n            const property = this.staticProperties[i];\n\n            property.uploadFunction(children, startIndex, amount, this.staticData, this.staticStride, property.offset);\n        }\n\n        this.staticBuffer.upload();\n    }\n\n    /**\n     * Destroys the ParticleBuffer.\n     *\n     */\n    destroy()\n    {\n        this.dynamicProperties = null;\n        this.dynamicData = null;\n        this.dynamicBuffer.destroy();\n\n        this.staticProperties = null;\n        this.staticData = null;\n        this.staticBuffer.destroy();\n    }\n\n}\n"]}