{"version":3,"sources":["../../../../src/core/renderers/webgl/WebGLRenderer.js"],"names":["WebGLRenderer","options","arg2","arg3","type","WEBGL","gl","CONTEXT_UID","legacy","runners","destroy","contextChange","reset","update","postrender","prerender","resize","_backgroundColorRgba","transparent","globalUniforms","projectionMatrix","addSystem","initPlugins","context","initFromContext","initFromOptions","alpha","antialias","premultipliedAlpha","stencil","preserveDrawingBuffer","renderingToScreen","_initContext","webGLVersion","_class","name","system","Error","i","add","maxTextures","getParameter","MAX_TEXTURE_IMAGE_UNITS","boundTextures","Array","emptyTextures","tempObj","_glTextures","screen","width","height","render","displayObject","renderTexture","clear","transform","skipUpdateTransform","run","emit","isLost","_lastObjectRendered","cacheParent","parent","_tempDisplayObjectParent","updateTransform","bind","batch","currentRenderer","start","undefined","clearBeforeRender","renderWebGL","flush","screenWidth","screenHeight","prototype","call","removeView","destroyPlugins","mixin"],"mappings":"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","file":"WebGLRenderer.js","sourcesContent":["import SystemRenderer from '../SystemRenderer';\nimport { sayHello, pluginTarget } from '../../utils';\nimport MaskSystem from './systems/MaskSystem';\nimport StencilSystem from './systems/StencilSystem';\nimport FilterSystem from './systems/FilterSystem';\nimport FramebufferSystem from './systems/FramebufferSystem';\nimport RenderTextureSystem from './systems/RenderTextureSystem';\nimport TextureSystem from './systems/textures/TextureSystem';\nimport ProjectionSystem from './systems/ProjectionSystem';\nimport StateSystem from './systems/StateSystem';\nimport GeometrySystem from './systems/geometry/GeometrySystem';\nimport ShaderSystem from './systems/shader/ShaderSystem';\nimport ContextSystem from './systems/ContextSystem';\nimport BatchSystem from './systems/BatchSystem';\n// import TextureGCSystem from './systems/textures/TextureGCSystem';\nimport { RENDERER_TYPE } from '../../const';\nimport UniformGroup from '../../shader/UniformGroup';\nimport { Matrix } from '../../math';\nimport Runner from 'mini-runner';\n\n/**\n * The WebGLRenderer draws the scene and all its content onto a webGL enabled canvas. This renderer\n * should be used for browsers that support webGL. This Render works by automatically managing webGLBatchs.\n * So no need for Sprite Batches or Sprite Clouds.\n * Don't forget to add the view to your DOM or you will not see anything :)\n *\n * @class\n * @memberof PIXI\n * @extends PIXI.SystemRenderer\n */\nexport default class WebGLRenderer extends SystemRenderer\n{\n    // eslint-disable-next-line valid-jsdoc\n    /**\n     *\n     * @param {object} [options] - The optional renderer parameters\n     * @param {number} [options.width=800] - the width of the screen\n     * @param {number} [options.height=600] - the height of the screen\n     * @param {HTMLCanvasElement} [options.view] - the canvas to use as a view, optional\n     * @param {boolean} [options.transparent=false] - If the render view is transparent, default false\n     * @param {boolean} [options.autoResize=false] - If the render view is automatically resized, default false\n     * @param {boolean} [options.antialias=false] - sets antialias. If not available natively then FXAA\n     *  antialiasing is used\n     * @param {boolean} [options.forceFXAA=false] - forces FXAA antialiasing to be used over native.\n     *  FXAA is faster, but may not always look as great\n     * @param {number} [options.resolution=1] - The resolution / device pixel ratio of the renderer.\n     *  The resolution of the renderer retina would be 2.\n     * @param {boolean} [options.clearBeforeRender=true] - This sets if the CanvasRenderer will clear\n     *  the canvas or not before the new render pass. If you wish to set this to false, you *must* set\n     *  preserveDrawingBuffer to `true`.\n     * @param {boolean} [options.preserveDrawingBuffer=false] - enables drawing buffer preservation,\n     *  enable this if you need to call toDataUrl on the webgl context.\n     * @param {boolean} [options.roundPixels=false] - If true Pixi will Math.floor() x/y values when\n     *  rendering, stopping pixel interpolation.\n     * @param {boolean} [options.legacy=false] - If true Pixi will aim to ensure compatibility\n     * with older / less advanced devices. If you experiance unexplained flickering try setting this to true.\n     */\n    constructor(options, arg2, arg3)\n    {\n        super('WebGL', options, arg2, arg3);\n\n        /**\n         * The type of this renderer as a standardised const\n         *\n         * @member {number}\n         * @see PIXI.RENDERER_TYPE\n         */\n        this.type = RENDERER_TYPE.WEBGL;\n\n         // this will be set by the contextSystem (this.context)\n        this.gl = null;\n        this.CONTEXT_UID = 0;\n        this.legacy = !!options.legacy;\n\n        // TODO legacy!\n\n        // runners!\n        this.runners = {\n            destroy:        new Runner('destroy'),\n            contextChange:  new Runner('contextChange', 1),\n            reset:          new Runner('reset'),\n            update:         new Runner('update'),\n            postrender:     new Runner('postrender'),\n            prerender:      new Runner('prerender'),\n            resize:         new Runner('resize', 2),\n        };\n\n        this._backgroundColorRgba[3] = this.transparent ? 0 : 1;\n\n        this.globalUniforms = new UniformGroup({\n            projectionMatrix: new Matrix(),\n        }, true);\n\n        this.addSystem(MaskSystem, 'mask')\n        .addSystem(ContextSystem, 'context')\n        .addSystem(StateSystem, 'state')\n        .addSystem(ShaderSystem, 'shader')\n        .addSystem(TextureSystem, 'texture')\n        .addSystem(GeometrySystem, 'geometry')\n        .addSystem(FramebufferSystem, 'framebuffer')\n        .addSystem(StencilSystem, 'stencil')\n        .addSystem(ProjectionSystem, 'projection')\n        // .addSystem(TextureGCSystem)\n        .addSystem(FilterSystem, 'filter')\n        .addSystem(RenderTextureSystem, 'renderTexture')\n        .addSystem(BatchSystem, 'batch');\n\n        this.initPlugins();\n\n        /**\n         * The options passed in to create a new webgl context.\n         *\n         * @member {object}\n         * @private\n         */\n        if (options.context)\n        {\n            this.context.initFromContext(options.context);\n        }\n        else\n        {\n            this.context.initFromOptions({\n                alpha: this.transparent,\n                antialias: options.antialias,\n                premultipliedAlpha: this.transparent && this.transparent !== 'notMultiplied',\n                stencil: true,\n                preserveDrawingBuffer: options.preserveDrawingBuffer,\n            });\n        }\n\n        this.renderingToScreen = true;\n\n        this._initContext();\n\n        sayHello(this.context.webGLVersion === 2 ? 'WebGL 2' : 'WebGL 1');\n    }\n\n    addSystem(_class, name)\n    {\n        if (!name)\n        {\n            name = _class.name;\n        }\n\n        // TODO - read name from class.name..\n\n        /*\n        if(name.includes('System'))\n        {\n            name = name.replace('System', '');\n            name = name.charAt(0).toLowerCase() + name.slice(1);\n        }\n        */\n\n        const system = new _class(this);\n\n        if (this[name])\n        {\n            throw new Error(`Whoops! ${name} is already a manger`);\n        }\n\n        this[name] = system;\n\n        for (const i in this.runners)\n        {\n            this.runners[i].add(system);\n        }\n\n        return this;\n\n        /**\n         * Fired after rendering finishes.\n         *\n         * @event PIXI.WebGLRenderer#postrender\n         */\n\n        /**\n         * Fired before rendering starts.\n         *\n         * @event PIXI.WebGLRenderer#prerender\n         */\n\n        /**\n         * Fired when the WebGL context is set.\n         *\n         * @event PIXI.WebGLRenderer#context\n         * @param {WebGLRenderingContext} gl - WebGL context.\n         */\n    }\n\n    /**\n     * Creates the WebGL context\n     *\n     * @private\n     */\n    _initContext()\n    {\n        const gl = this.gl;\n\n        const maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n\n        this.boundTextures = new Array(maxTextures);\n        this.emptyTextures = new Array(maxTextures);\n\n        const tempObj = { _glTextures: {} };\n\n        for (let i = 0; i < maxTextures; i++)\n        {\n            this.boundTextures[i] = tempObj;\n        }\n\n        // setup the width/height properties and gl viewport\n        this.resize(this.screen.width, this.screen.height);\n    }\n\n    /**\n     * Renders the object to its webGL view\n     *\n     * @param {PIXI.DisplayObject} displayObject - the object to be rendered\n     * @param {PIXI.RenderTexture} renderTexture - The render texture to render to.\n     * @param {boolean} [clear] - Should the canvas be cleared before the new render\n     * @param {PIXI.Transform} [transform] - A transform to apply to the render texture before rendering.\n     * @param {boolean} [skipUpdateTransform] - Should we skip the update transform pass?\n     */\n    render(displayObject, renderTexture, clear, transform, skipUpdateTransform)\n    {\n        // can be handy to know!\n        this.renderingToScreen = !renderTexture;\n\n        this.runners.prerender.run();\n        this.emit('prerender');\n\n        // no point rendering if our context has been blown up!\n        if (this.context.isLost)\n        {\n            return;\n        }\n\n        if (!renderTexture)\n        {\n            this._lastObjectRendered = displayObject;\n        }\n\n        if (!skipUpdateTransform)\n        {\n            // update the scene graph\n            const cacheParent = displayObject.parent;\n\n            displayObject.parent = this._tempDisplayObjectParent;\n            displayObject.updateTransform();\n            displayObject.parent = cacheParent;\n           // displayObject.hitArea = //TODO add a temp hit area\n        }\n\n        this.renderTexture.bind(renderTexture);\n        this.batch.currentRenderer.start();\n\n        if (clear !== undefined ? clear : this.clearBeforeRender)\n        {\n            this.renderTexture.clear();\n        }\n\n        displayObject.renderWebGL(this);\n\n        // apply transform..\n        this.batch.currentRenderer.flush();\n\n        this.runners.postrender.run();\n        this.emit('postrender');\n    }\n\n    /**\n     * Resizes the webGL view to the specified width and height.\n     *\n     * @param {number} screenWidth - the new width of the screen\n     * @param {number} screenHeight - the new height of the screen\n     */\n    resize(screenWidth, screenHeight)\n    {\n        SystemRenderer.prototype.resize.call(this, screenWidth, screenHeight);\n        this.runners.resize.run(screenWidth, screenHeight);\n    }\n\n    /**\n     * Resets the WebGL state so you can render things however you fancy!\n     *\n     * @return {PIXI.WebGLRenderer} Returns itself.\n     */\n    reset()\n    {\n        this.runners.reset.run();\n\n        return this;\n    }\n\n    /**\n     * Removes everything from the renderer (event listeners, spritebatch, etc...)\n     *\n     * @param {boolean} [removeView=false] - Removes the Canvas element from the DOM.\n     *  See: https://github.com/pixijs/pixi.js/issues/2233\n     */\n    destroy(removeView)\n    {\n        this.runners.destroy.run();\n\n        // call base destroy\n        super.destroy(removeView);\n\n        this.destroyPlugins();\n\n        // TODO nullify all the managers..\n        this.gl = null;\n    }\n}\n\n/**\n * Collection of installed plugins. These are included by default in PIXI, but can be excluded\n * by creating a custom build. Consult the README for more information about creating custom\n * builds and excluding plugins.\n * @name PIXI.WebGLRenderer#plugins\n * @type {object}\n * @readonly\n * @property {PIXI.accessibility.AccessibilityManager} accessibility Support tabbing interactive elements.\n * @property {PIXI.extract.WebGLExtract} extract Extract image data from renderer.\n * @property {PIXI.interaction.InteractionManager} interaction Handles mouse, touch and pointer events.\n * @property {PIXI.prepare.WebGLPrepare} prepare Pre-render display objects.\n */\n\n/**\n * Adds a plugin to the renderer.\n *\n * @method PIXI.WebGLRenderer#registerPlugin\n * @param {string} pluginName - The name of the plugin.\n * @param {Function} ctor - The constructor function or class for the plugin.\n */\n\npluginTarget.mixin(WebGLRenderer);\n"]}