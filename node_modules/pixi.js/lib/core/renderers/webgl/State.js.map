{"version":3,"sources":["../../../../src/core/renderers/webgl/State.js"],"names":["BLEND","OFFSET","CULLING","DEPTH_TEST","WINDING","State","data","blendMode","polygonOffset","blend","value","_blendMode","_polygonOffset","offsets"],"mappings":";;;;;;;;AAAA;;AAEA,IAAMA,QAAQ,CAAd;AACA,IAAMC,SAAS,CAAf;AACA,IAAMC,UAAU,CAAhB;AACA,IAAMC,aAAa,CAAnB;AACA,IAAMC,UAAU,CAAhB;;AAEA;;;;;;;;IAOqBC,K;AAEjB;;;AAGA,qBACA;AAAA;;AACI,aAAKC,IAAL,GAAY,CAAZ;;AAEA,aAAKC,SAAL,GAAiB,CAAjB;AACA,aAAKC,aAAL,GAAqB,CAArB;;AAEA,aAAKC,KAAL,GAAa,IAAb;AACF;AACD;;AAED;;;;;;;;;4BAMA;AACI,mBAAO,CAAC,EAAE,KAAKH,IAAL,GAAa,KAAKN,KAApB,CAAR;AACH,S;0BAESU,K,EAAO;AACjB;AACI,gBAAI,CAAC,EAAE,KAAKJ,IAAL,GAAa,KAAKN,KAApB,CAAD,KAAiCU,KAArC,EACA;AACI,qBAAKJ,IAAL,IAAc,KAAKN,KAAnB;AACH;AACJ;;AAED;;;;;;;;;4BAOA;AACI,mBAAO,CAAC,EAAE,KAAKM,IAAL,GAAa,KAAKL,MAApB,CAAR;AACH,S;0BAEWS,K,EAAO;AACnB;AACI,gBAAI,CAAC,EAAE,KAAKJ,IAAL,GAAa,KAAKL,MAApB,CAAD,KAAkCS,KAAtC,EACA;AACI,qBAAKJ,IAAL,IAAc,KAAKL,MAAnB;AACH;AACJ;;AAED;;;;;;;;;4BAOA;AACI,mBAAO,CAAC,EAAE,KAAKK,IAAL,GAAa,KAAKJ,OAApB,CAAR;AACH,S;0BAEWQ,K,EAAO;AACnB;AACI,gBAAI,CAAC,EAAE,KAAKJ,IAAL,GAAa,KAAKJ,OAApB,CAAD,KAAmCQ,KAAvC,EACA;AACI,qBAAKJ,IAAL,IAAc,KAAKJ,OAAnB;AACH;AACJ;;AAED;;;;;;;;;4BAOA;AACI,mBAAO,CAAC,EAAE,KAAKI,IAAL,GAAa,KAAKH,UAApB,CAAR;AACH,S;0BAEaO,K,EAAO;AACrB;AACI,gBAAI,CAAC,EAAE,KAAKJ,IAAL,GAAa,KAAKH,UAApB,CAAD,KAAsCO,KAA1C,EACA;AACI,qBAAKJ,IAAL,IAAc,KAAKH,UAAnB;AACH;AACJ;;AAED;;;;;;;;4BAMA;AACI,mBAAO,CAAC,EAAE,KAAKG,IAAL,GAAa,KAAKF,OAApB,CAAR;AACH,S;0BAEsBM,K,EAAO;AAC9B;AACI,gBAAI,CAAC,EAAE,KAAKJ,IAAL,GAAa,KAAKF,OAApB,CAAD,KAAmCM,KAAvC,EACA;AACI,qBAAKJ,IAAL,IAAc,KAAKF,OAAnB;AACH;AACJ;;AAED;;;;;;;;;;;4BASA;AACI,mBAAO,KAAKO,UAAZ;AACH,S;0BAEaD,K,EAAO;AACrB;AACI;AACA,iBAAKD,KAAL,GAAcC,UAAU,EAAxB;AACA,iBAAKC,UAAL,GAAkBD,KAAlB;AACH;;AAED;;;;;;;;;4BAOA;AACI,mBAAO,KAAKE,cAAZ;AACH,S;0BAEiBF,K,EAAO;AACzB;AACI,iBAAKG,OAAL,GAAe,CAAC,CAACH,KAAjB;AACA,iBAAKE,cAAL,GAAsBF,KAAtB;AACH;;;;;;kBAhJgBL,K","file":"State.js","sourcesContent":["/* eslint-disable max-len */\n\nconst BLEND = 0;\nconst OFFSET = 1;\nconst CULLING = 2;\nconst DEPTH_TEST = 3;\nconst WINDING = 4;\n\n/**\n * This is a webGL state. It is passed The WebGL StateManager.\n * Each mesh renderered may require webGL to be in a different state.\n * For example you may want different blend mode or to enable polygon offsets\n *\n * @class\n */\nexport default class State\n{\n    /**\n     *\n     */\n    constructor()\n    {\n        this.data = 0;\n\n        this.blendMode = 0;\n        this.polygonOffset = 0;\n\n        this.blend = true;\n      //  this.depthTest = true;\n    }\n\n    /**\n     * Activates blending of the computed fragment color values\n     *\n     * @member {boolean}\n     */\n    get blend()\n    {\n        return !!(this.data & (1 << BLEND));\n    }\n\n    set blend(value) // eslint-disable-line require-jsdoc\n    {\n        if (!!(this.data & (1 << BLEND)) !== value)\n        {\n            this.data ^= (1 << BLEND);\n        }\n    }\n\n    /**\n     * Activates adding an offset to depth values of polygon's fragments\n     *\n     * @member {boolean}\n     * @default false\n     */\n    get offsets()\n    {\n        return !!(this.data & (1 << OFFSET));\n    }\n\n    set offsets(value) // eslint-disable-line require-jsdoc\n    {\n        if (!!(this.data & (1 << OFFSET)) !== value)\n        {\n            this.data ^= (1 << OFFSET);\n        }\n    }\n\n    /**\n     * Activates culling of polygons.\n     *\n     * @member {boolean}\n     * @default false\n     */\n    get culling()\n    {\n        return !!(this.data & (1 << CULLING));\n    }\n\n    set culling(value) // eslint-disable-line require-jsdoc\n    {\n        if (!!(this.data & (1 << CULLING)) !== value)\n        {\n            this.data ^= (1 << CULLING);\n        }\n    }\n\n    /**\n     * Activates depth comparisons and updates to the depth buffer.\n     *\n     * @member {boolean}\n     * @default false\n     */\n    get depthTest()\n    {\n        return !!(this.data & (1 << DEPTH_TEST));\n    }\n\n    set depthTest(value) // eslint-disable-line require-jsdoc\n    {\n        if (!!(this.data & (1 << DEPTH_TEST)) !== value)\n        {\n            this.data ^= (1 << DEPTH_TEST);\n        }\n    }\n\n    /**\n     * Specifies whether or not front or back-facing polygons can be culled.\n     * @member {boolean}\n     * @default false\n     */\n    get clockwiseFrontFace()\n    {\n        return !!(this.data & (1 << WINDING));\n    }\n\n    set clockwiseFrontFace(value) // eslint-disable-line require-jsdoc\n    {\n        if (!!(this.data & (1 << WINDING)) !== value)\n        {\n            this.data ^= (1 << WINDING);\n        }\n    }\n\n    /**\n     * The blend mode to be applied when this state is set. Apply a value of `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n     * Setting this mode to anything other than NO_BLEND will automatically switch blending on.\n     *\n     * @member {boolean} value\n     * @default PIXI.BLEND_MODES.NORMAL\n     * @see PIXI.BLEND_MODES\n     */\n    get blendMode()\n    {\n        return this._blendMode;\n    }\n\n    set blendMode(value) // eslint-disable-line require-jsdoc\n    {\n        // 17 is NO BLEND\n        this.blend = (value !== 17);\n        this._blendMode = value;\n    }\n\n    /**\n     * The polygon offset. Setting this property to anything other than 0 will automatically enable poygon offset fill.\n     *\n     * @member {number}\n     * @default 0\n     */\n    get polygonOffset()\n    {\n        return this._polygonOffset;\n    }\n\n    set polygonOffset(value) // eslint-disable-line require-jsdoc\n    {\n        this.offsets = !!value;\n        this._polygonOffset = value;\n    }\n}\n\n"]}