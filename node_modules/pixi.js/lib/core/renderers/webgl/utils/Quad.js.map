{"version":3,"sources":["../../../../../src/core/renderers/webgl/utils/Quad.js"],"names":["Quad","vertices","Float32Array","uvs","interleaved","i","indices","addAttribute","addIndex","initVao","shader","vao","clear","indexBuffer","vertexBuffer","attributes","aVertexPosition","gl","FLOAT","aTextureCoord","map","targetTextureFrame","destinationFrame","x","y","width","height","upload","getAttribute","update","destroy"],"mappings":"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","file":"Quad.js","sourcesContent":["import createIndicesForQuads from '../../../utils/createIndicesForQuads';\nimport Geometry from '../../../geometry/Geometry';\n\n/**\n * Helper class to create a quad\n *\n * @class\n * @memberof PIXI\n */\nexport default class Quad extends Geometry\n{\n    /**\n     * @param {WebGLRenderingContext} gl - The gl context for this quad to use.\n     * @param {object} state - TODO: Description\n     */\n    constructor()\n    {\n        super();\n\n        /**\n         * An array of vertices\n         *\n         * @member {Float32Array}\n         */\n        this.vertices = new Float32Array([\n            -1, -1,\n            1, -1,\n            1, 1,\n            -1, 1,\n        ]);\n\n        /**\n         * The Uvs of the quad\n         *\n         * @member {Float32Array}\n         */\n        this.uvs = new Float32Array([\n            0, 0,\n            1, 0,\n            1, 1,\n            0, 1,\n        ]);\n\n        this.interleaved = new Float32Array(8 * 2);\n\n        for (let i = 0; i < 4; i++)\n        {\n            this.interleaved[i * 4] = this.vertices[(i * 2)];\n            this.interleaved[(i * 4) + 1] = this.vertices[(i * 2) + 1];\n            this.interleaved[(i * 4) + 2] = this.uvs[i * 2];\n            this.interleaved[(i * 4) + 3] = this.uvs[(i * 2) + 1];\n        }\n\n        /*\n         * @member {Uint16Array} An array containing the indices of the vertices\n         *\n         * @member {Uint16Array}\n         */\n        this.indices = createIndicesForQuads(1);\n\n        /**\n         * The vertex buffer\n         *\n         * @member {glCore.GLBuffer}\n         */\n       // this.vertexBuffer = glCore.GLBuffer.createVertexBuffer(gl, this.interleaved, gl.STATIC_DRAW);\n\n        /**\n         * The index buffer\n         *\n         * @member {glCore.GLBuffer}\n         */\n       // this.indexBuffer = glCore.GLBuffer.createIndexBuffer(gl, this.indices, gl.STATIC_DRAW);\n\n        /**\n         * The vertex array object\n         *\n         * @member {glCore.VertexArrayObject}\n         */\n       // this.vao = new glCore.VertexArrayObject(gl, state);\n\n        this.addAttribute('aVertexPosition', this.vertices)\n        .addAttribute('aTextureCoord', this.uvs)\n        .addIndex(this.indices);\n    }\n\n    /**\n     * Initialises the vaos and uses the shader.\n     *\n     * @param {PIXI.Shader} shader - the shader to use\n     */\n    initVao(shader)\n    {\n        this.vao.clear()\n        .addIndex(this.indexBuffer)\n        .addAttribute(this.vertexBuffer, shader.attributes.aVertexPosition, this.gl.FLOAT, false, 4 * 4, 0)\n        .addAttribute(this.vertexBuffer, shader.attributes.aTextureCoord, this.gl.FLOAT, false, 4 * 4, 2 * 4);\n    }\n\n    /**\n     * Maps two Rectangle to the quad.\n     *\n     * @param {PIXI.Rectangle} targetTextureFrame - the first rectangle\n     * @param {PIXI.Rectangle} destinationFrame - the second rectangle\n     * @return {PIXI.Quad} Returns itself.\n     */\n    map(targetTextureFrame, destinationFrame)\n    {\n        let x = 0; // destinationFrame.x / targetTextureFrame.width;\n        let y = 0; // destinationFrame.y / targetTextureFrame.height;\n\n        this.uvs[0] = x;\n        this.uvs[1] = y;\n\n        this.uvs[2] = x + (destinationFrame.width / targetTextureFrame.width);\n        this.uvs[3] = y;\n\n        this.uvs[4] = x + (destinationFrame.width / targetTextureFrame.width);\n        this.uvs[5] = y + (destinationFrame.height / targetTextureFrame.height);\n\n        this.uvs[6] = x;\n        this.uvs[7] = y + (destinationFrame.height / targetTextureFrame.height);\n\n        x = destinationFrame.x;\n        y = destinationFrame.y;\n\n        this.vertices[0] = x;\n        this.vertices[1] = y;\n\n        this.vertices[2] = x + destinationFrame.width;\n        this.vertices[3] = y;\n\n        this.vertices[4] = x + destinationFrame.width;\n        this.vertices[5] = y + destinationFrame.height;\n\n        this.vertices[6] = x;\n        this.vertices[7] = y + destinationFrame.height;\n\n        return this;\n    }\n\n    /**\n     * Binds the buffer and uploads the data\n     *\n     * @return {PIXI.Quad} Returns itself.\n     */\n    upload()\n    {\n        this.getAttribute('aVertexPosition').update();\n        this.getAttribute('aTextureCoord').update();\n\n        for (let i = 0; i < 4; i++)\n        {\n            this.interleaved[i * 4] = this.vertices[(i * 2)];\n            this.interleaved[(i * 4) + 1] = this.vertices[(i * 2) + 1];\n            this.interleaved[(i * 4) + 2] = this.uvs[i * 2];\n            this.interleaved[(i * 4) + 3] = this.uvs[(i * 2) + 1];\n        }\n\n        this.vertexBuffer.upload(this.interleaved);\n\n        return this;\n    }\n\n    /**\n     * Removes this quad from WebGL\n     */\n    destroy()\n    {\n     //   const gl = this.gl;\n\n      //  gl.deleteBuffer(this.vertexBuffer);\n      //  gl.deleteBuffer(this.indexBuffer);\n    }\n}\n"]}