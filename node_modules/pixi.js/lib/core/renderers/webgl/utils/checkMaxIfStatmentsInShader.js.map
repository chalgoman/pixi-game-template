{"version":3,"sources":["../../../../../src/core/renderers/webgl/utils/checkMaxIfStatmentsInShader.js"],"names":["checkMaxIfStatmentsInShader","fragTemplate","join","maxIfs","gl","Error","shader","createShader","FRAGMENT_SHADER","fragmentSrc","replace","generateIfTestSrc","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","src","i"],"mappings":";;;kBASwBA,2B;AATxB,IAAMC,eAAe,CACjB,0BADiB,EAEjB,kBAFiB,EAGjB,mBAHiB,EAIjB,WAJiB,EAKjB,2BALiB,EAMjB,GANiB,EAOnBC,IAPmB,CAOd,IAPc,CAArB;;AASe,SAASF,2BAAT,CAAqCG,MAArC,EAA6CC,EAA7C,EACf;AACI;AACA,QAAID,WAAW,CAAf,EACA;AACI,cAAM,IAAIE,KAAJ,CAAU,+DAAV,CAAN;AACH;AACD;;AAEA,QAAMC,SAASF,GAAGG,YAAH,CAAgBH,GAAGI,eAAnB,CAAf;;AAEA,WAAO,IAAP,EAAa;AACb;AACI,YAAMC,cAAcR,aAAaS,OAAb,CAAqB,aAArB,EAAoCC,kBAAkBR,MAAlB,CAApC,CAApB;;AAEAC,WAAGQ,YAAH,CAAgBN,MAAhB,EAAwBG,WAAxB;AACAL,WAAGS,aAAH,CAAiBP,MAAjB;;AAEA,YAAI,CAACF,GAAGU,kBAAH,CAAsBR,MAAtB,EAA8BF,GAAGW,cAAjC,CAAL,EACA;AACIZ,qBAAUA,SAAS,CAAV,GAAe,CAAxB;AACH,SAHD,MAKA;AACI;AACA;AACH;AACJ;;AAED,WAAOA,MAAP;AACH;;AAED,SAASQ,iBAAT,CAA2BR,MAA3B,EACA;AACI,QAAIa,MAAM,EAAV;;AAEA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAId,MAApB,EAA4B,EAAEc,CAA9B,EACA;AACI,YAAIA,IAAI,CAAR,EACA;AACID,mBAAO,SAAP;AACH;;AAED,YAAIC,IAAId,SAAS,CAAjB,EACA;AACIa,mCAAqBC,CAArB;AACH;AACJ;;AAED,WAAOD,GAAP;AACH","file":"checkMaxIfStatmentsInShader.js","sourcesContent":["const fragTemplate = [\n    'precision mediump float;',\n    'void main(void){',\n    'float test = 0.1;',\n    '%forloop%',\n    'gl_FragColor = vec4(0.0);',\n    '}',\n].join('\\n');\n\nexport default function checkMaxIfStatmentsInShader(maxIfs, gl)\n{\n    // @if DEBUG\n    if (maxIfs === 0)\n    {\n        throw new Error('Invalid value of `0` passed to `checkMaxIfStatementsInShader`');\n    }\n    // @endif\n\n    const shader = gl.createShader(gl.FRAGMENT_SHADER);\n\n    while (true) // eslint-disable-line no-constant-condition\n    {\n        const fragmentSrc = fragTemplate.replace(/%forloop%/gi, generateIfTestSrc(maxIfs));\n\n        gl.shaderSource(shader, fragmentSrc);\n        gl.compileShader(shader);\n\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))\n        {\n            maxIfs = (maxIfs / 2) | 0;\n        }\n        else\n        {\n            // valid!\n            break;\n        }\n    }\n\n    return maxIfs;\n}\n\nfunction generateIfTestSrc(maxIfs)\n{\n    let src = '';\n\n    for (let i = 0; i < maxIfs; ++i)\n    {\n        if (i > 0)\n        {\n            src += '\\nelse ';\n        }\n\n        if (i < maxIfs - 1)\n        {\n            src += `if(test == ${i}.0){}`;\n        }\n    }\n\n    return src;\n}\n"]}