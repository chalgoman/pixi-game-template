{"version":3,"sources":["../../../../../src/core/renderers/webgl/systems/StateSystem.js"],"names":["BLEND","OFFSET","CULLING","DEPTH_TEST","WINDING","StateSystem","renderer","gl","maxAttribs","nativeVaoExtension","attribState","stateId","polygonOffset","blendMode","map","setBlend","setOffset","setCullFace","setDepthTest","setFrontFace","checks","defaultState","blend","depth","contextChange","getParameter","MAX_VERTEX_ATTRIBS","getExtension","tempAttribState","Array","blendModes","setState","reset","state","data","diff","i","call","length","value","updateCheck","checkBlendMode","POLYGON_OFFSET_FILL","CULL_FACE","frontFace","setBlendMode","blendFunc","setPolygonOffset","scale","resetAttributes","disableVertexAttribArray","bindVertexArrayOES","pixelStorei","UNPACK_FLIP_Y_WEBGL","func","index","indexOf","push","splice","system"],"mappings":"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","file":"StateSystem.js","sourcesContent":["import mapWebGLBlendModesToPixi from '../utils/mapWebGLBlendModesToPixi';\nimport WebGLSystem from './WebGLSystem';\nimport WebGLState from '../State';\n\nconst BLEND = 0;\nconst OFFSET = 1;\nconst CULLING = 2;\nconst DEPTH_TEST = 3;\nconst WINDING = 4;\n\n/**\n * A WebGL state machines\n *\n * @memberof PIXI\n * @class\n */\nexport default class StateSystem extends WebGLSystem\n{\n    /**\n     * @param {WebGLRenderingContext} gl - The current WebGL rendering context\n     */\n    constructor(renderer)\n    {\n        super(renderer);\n\n        this.gl = null;\n\n        this.maxAttribs = null;\n\n        // check we have vao..\n        this.nativeVaoExtension = null;\n\n        this.attribState = null;\n\n        this.stateId = 0;\n        this.polygonOffset = 0;\n        this.blendMode = 17;\n\n        this.map = [];\n\n        // map functions for when we set state..\n        this.map[BLEND] = this.setBlend;\n        this.map[OFFSET] = this.setOffset;\n        this.map[CULLING] = this.setCullFace;\n        this.map[DEPTH_TEST] = this.setDepthTest;\n        this.map[WINDING] = this.setFrontFace;\n\n        this.checks = [];\n\n        this.defaultState = new WebGLState();\n        this.defaultState.blend = true;\n        this.defaultState.depth = true;\n    }\n\n    contextChange(gl)\n    {\n        /**\n         * The current WebGL rendering context\n         *\n         * @member {WebGLRenderingContext}\n         */\n        this.gl = gl;\n\n        this.maxAttribs = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n\n        // check we have vao..\n        this.nativeVaoExtension = (\n            gl.getExtension('OES_vertex_array_object')\n            || gl.getExtension('MOZ_OES_vertex_array_object')\n            || gl.getExtension('WEBKIT_OES_vertex_array_object')\n        );\n\n        this.attribState = {\n            tempAttribState: new Array(this.maxAttribs),\n            attribState: new Array(this.maxAttribs),\n        };\n\n        this.blendModes = mapWebGLBlendModesToPixi(gl);\n\n        this.setState(this.defaultState);\n\n        this.reset();\n    }\n\n    /**\n     * Sets the current state\n     *\n     * @param {*} state - The state to set.\n     */\n    setState(state)\n    {\n        state = state || this.defaultState;\n\n        // TODO maybe to an object check? ( this.state === state )?\n        if (this.stateId !== state.data)\n        {\n            let diff = this.stateId ^ state.data;\n            let i = 0;\n\n            // order from least to most common\n            while (diff)\n            {\n                if (diff & 1)\n                {\n                    // state change!\n                    this.map[i].call(this, !!(state.data & (1 << i)));\n                }\n\n                diff = diff >> 1;\n                i++;\n            }\n\n            this.stateId = state.data;\n        }\n\n        // based on the above settings we check for specific modes..\n        // for example if blend is active we check and set the blend modes\n        // or of polygon offset is active we check the poly depth.\n        for (let i = 0; i < this.checks.length; i++)\n        {\n            this.checks[i](this, state);\n        }\n    }\n\n    /**\n     * Enables or disabled blending.\n     *\n     * @param {boolean} value - Turn on or off webgl blending.\n     */\n    setBlend(value)\n    {\n        this.updateCheck(StateSystem.checkBlendMode, value);\n\n        this.gl[value ? 'enable' : 'disable'](this.gl.BLEND);\n    }\n\n    /**\n     * Enables or disable polygon offset fill\n     *\n     * @param {boolean} value - Turn on or off webgl polygon offset testing.\n     */\n    setOffset(value)\n    {\n        this.gl[value ? 'enable' : 'disable'](this.gl.POLYGON_OFFSET_FILL);\n    }\n\n    /**\n     * Sets whether to enable or disable depth test.\n     *\n     * @param {boolean} value - Turn on or off webgl depth testing.\n     */\n    setDepthTest(value)\n    {\n        this.gl[value ? 'enable' : 'disable'](this.gl.DEPTH_TEST);\n    }\n\n    /**\n     * Sets whether to enable or disable cull face.\n     *\n     * @param {boolean} value - Turn on or off webgl cull face.\n     */\n    setCullFace(value)\n    {\n        this.gl[value ? 'enable' : 'disable'](this.gl.CULL_FACE);\n    }\n\n    /**\n     * Sets the gl front face.\n     *\n     * @param {boolean} value - true is clockwise and false is counter-clockwise\n     */\n    setFrontFace(value)\n    {\n        this.gl.frontFace(this.gl[value ? 'CW' : 'CCW']);\n    }\n\n    /**\n     * Sets the blend mode.\n     *\n     * @param {number} value - The blend mode to set to.\n     */\n    setBlendMode(value)\n    {\n        if (value === this.blendMode)\n        {\n            return;\n        }\n\n        this.blendMode = value;\n        this.gl.blendFunc(this.blendModes[value][0], this.blendModes[value][1]);\n    }\n\n    /**\n     * Sets the polygon offset.\n     *\n     * @param {number} value - the polygon offset\n     * @param {number} scale - the polygon offset scale\n     */\n    setPolygonOffset(value, scale)\n    {\n        this.gl.polygonOffset(value, scale);\n    }\n\n    /**\n     * Disables all the vaos in use\n     *\n     */\n    resetAttributes()\n    {\n        for (let i = 0; i < this.attribState.tempAttribState.length; i++)\n        {\n            this.attribState.tempAttribState[i] = 0;\n        }\n\n        for (let i = 0; i < this.attribState.attribState.length; i++)\n        {\n            this.attribState.attribState[i] = 0;\n        }\n\n        // im going to assume one is always active for performance reasons.\n        for (let i = 1; i < this.maxAttribs; i++)\n        {\n            this.gl.disableVertexAttribArray(i);\n        }\n    }\n\n    // used\n    /**\n     * Resets all the logic and disables the vaos\n     */\n    reset()\n    {\n        // unbind any VAO if they exist..\n        if (this.nativeVaoExtension)\n        {\n            this.nativeVaoExtension.bindVertexArrayOES(null);\n        }\n\n        // reset all attributes..\n        this.resetAttributes();\n\n        this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, false);\n\n        this.setBlendMode(0);\n\n        // TODO?\n        // this.setState(this.defaultState);\n    }\n\n    /**\n     * checks to see which updates should be checked based on which settings have been activated\n     * for example if blend is enabled then we shold check the blend modes each time the state is changed\n     * or if poygon fill is activated then we need to check if the polygone offset changes.\n     * The idea is that we only check what we have too.\n     *\n     * @param {Function} func  the checking function to add or remove\n     * @param {boolean} value  should the check function be added or removed.\n     */\n    updateCheck(func, value)\n    {\n        const index = this.checks.indexOf(func);\n\n        if (value && index === -1)\n        {\n            this.checks.push(func);\n        }\n        else if (!value && index !== -1)\n        {\n            this.checks.splice(index, 1);\n        }\n    }\n\n    /**\n     * A private little wrapper function that we call to check the blend mode.\n     *\n     * @static\n     * @private\n     * @param {PIXI.StateSystem} System  the System to perform the state check on\n     * @param {PIXI.State} state  the state that the blendMode will pulled from\n     */\n    static checkBlendMode(system, state)\n    {\n        system.setBlendMode(state.blendMode);\n    }\n\n    // TODO - add polygon offset?\n}\n"]}