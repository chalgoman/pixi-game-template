{"version":3,"sources":["../../../../../src/core/renderers/webgl/systems/FramebufferSystem.js"],"names":["FramebufferSystem","contextChange","gl","renderer","CONTEXT_UID","drawBufferExtension","context","extensions","drawBuffers","bind","framebuffer","fbo","glFrameBuffers","initFramebuffer","bindFramebuffer","FRAMEBUFFER","dirtyId","dirtyFormat","updateFramebuffer","dirtySize","resizeFramebuffer","i","colorTextures","length","texturePart","texture","unbind","depthTexture","viewport","width","height","clear","r","g","b","a","clearColor","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","createFramebuffer","stencil","depth","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_STENCIL","count","Math","min","activeTextures","framebufferTexture2D","COLOR_ATTACHMENT0","TEXTURE_CUBE_MAP_NEGATIVE_X","side","_glTextures","TEXTURE_2D","push","drawBuffersWEBGL","depthTextureExt","DEPTH_ATTACHMENT","createRenderbuffer","framebufferRenderbuffer","DEPTH_STENCIL_ATTACHMENT"],"mappings":"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","file":"FramebufferSystem.js","sourcesContent":["import WebGLSystem from './WebGLSystem';\n\n/**\n * @class\n * @extends PIXI.WebGLSystem\n * @memberof PIXI\n */\nexport default class FramebufferSystem extends WebGLSystem\n{\n    /**\n     * Sets up the renderer context and necessary buffers.\n     *\n     * @private\n     */\n    contextChange()\n    {\n        this.gl = this.renderer.gl;\n        this.CONTEXT_UID = this.renderer.CONTEXT_UID;\n\n        this.drawBufferExtension = this.renderer.context.extensions.drawBuffers;\n    }\n\n    bind(framebuffer)\n    {\n        const gl = this.gl;\n\n        if (framebuffer)\n        {\n            // TODO cacheing layer!\n\n            const fbo = framebuffer.glFrameBuffers[this.CONTEXT_UID] || this.initFramebuffer(framebuffer);\n\n            gl.bindFramebuffer(gl.FRAMEBUFFER, fbo.framebuffer);\n            // makesure all textures are unbound..\n\n            // now check for updates...\n            if (fbo.dirtyId !== framebuffer.dirtyId)\n            {\n                fbo.dirtyId = framebuffer.dirtyId;\n\n                if (fbo.dirtyFormat !== framebuffer.dirtyFormat)\n                {\n                    fbo.dirtyFormat = framebuffer.dirtyFormat;\n                    this.updateFramebuffer(framebuffer);\n                }\n                else if (fbo.dirtySize !== framebuffer.dirtySize)\n                {\n                    fbo.dirtySize = framebuffer.dirtySize;\n                    this.resizeFramebuffer(framebuffer);\n                }\n            }\n\n            for (let i = 0; i < framebuffer.colorTextures.length; i++)\n            {\n                if (framebuffer.colorTextures[i].texturePart)\n                {\n                    this.renderer.texture.unbind(framebuffer.colorTextures[i].texture);\n                }\n                else\n                {\n                    this.renderer.texture.unbind(framebuffer.colorTextures[i]);\n                }\n            }\n\n            if (framebuffer.depthTexture)\n            {\n                this.renderer.texture.unbind(framebuffer.depthTexture);\n            }\n\n            gl.viewport(0, 0, framebuffer.width, framebuffer.height);\n        }\n        else\n        {\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n            gl.viewport(0, 0, this.renderer.width, this.renderer.height);\n        }\n    }\n\n    clear(r, g, b, a)\n    {\n        const gl = this.gl;\n\n        // TODO clear color can be set only one right?\n        gl.clearColor(r, g, b, a);\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    }\n\n    // private functions...\n\n    initFramebuffer(framebuffer)\n    {\n        const gl = this.gl;\n\n        // TODO - make this a class?\n        const fbo = {\n            framebuffer: gl.createFramebuffer(),\n            stencil: null,\n            dirtyId: 0,\n            dirtyFormat: 0,\n            dirtySize: 0,\n        };\n\n        framebuffer.glFrameBuffers[this.CONTEXT_UID] = fbo;\n\n        return fbo;\n    }\n\n    resizeFramebuffer(framebuffer)\n    {\n        const gl = this.gl;\n\n        if (framebuffer.stencil || framebuffer.depth)\n        {\n            gl.bindRenderbuffer(gl.RENDERBUFFER, this.stencil);\n            gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, framebuffer.width, framebuffer.height);\n        }\n    }\n\n    updateFramebuffer(framebuffer)\n    {\n        const gl = this.gl;\n\n        const fbo = framebuffer.glFrameBuffers[this.CONTEXT_UID];\n\n        // bind the color texture\n        const colorTextures = framebuffer.colorTextures;\n\n        let count = colorTextures.length;\n\n        if (!this.drawBufferExtension)\n        {\n            count = Math.min(count, 1);\n        }\n\n        const activeTextures = [];\n\n        for (let i = 0; i < count; i++)\n        {\n            const texture = framebuffer.colorTextures[i];\n\n            if (texture.texturePart)\n            {\n                this.renderer.texture.bind(texture.texture, 0);\n\n                gl.framebufferTexture2D(gl.FRAMEBUFFER,\n                                        gl.COLOR_ATTACHMENT0 + i,\n                                        gl.TEXTURE_CUBE_MAP_NEGATIVE_X + texture.side,\n                                        texture.texture._glTextures[this.CONTEXT_UID].texture,\n                                        0);\n            }\n            else\n            {\n                this.renderer.texture.bind(texture, 0);\n\n                gl.framebufferTexture2D(gl.FRAMEBUFFER,\n                                        gl.COLOR_ATTACHMENT0 + i,\n                                        gl.TEXTURE_2D,\n                                        texture._glTextures[this.CONTEXT_UID].texture,\n                                        0);\n            }\n\n            activeTextures.push(gl.COLOR_ATTACHMENT0 + i);\n        }\n\n        if (this.drawBufferExtension && activeTextures.length > 1)\n        {\n            this.drawBufferExtension.drawBuffersWEBGL(activeTextures);\n        }\n\n        if (framebuffer.depthTexture)\n        {\n            const depthTextureExt = this.renderer.context.extensions.depthTexture;\n\n            if (depthTextureExt)\n            {\n                const depthTexture = framebuffer.depthTexture;\n\n                this.renderer.texture.bind(depthTexture, 0);\n\n                gl.framebufferTexture2D(gl.FRAMEBUFFER,\n                                        gl.DEPTH_ATTACHMENT,\n                                        gl.TEXTURE_2D,\n                                        depthTexture._glTextures[this.CONTEXT_UID].texture,\n                                        0);\n            }\n        }\n\n        if (framebuffer.stencil || framebuffer.depth)\n        {\n            fbo.stencil = gl.createRenderbuffer();\n\n            gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.stencil);\n\n            // TODO.. this is depth AND stencil?\n            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, fbo.stencil);\n            gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, framebuffer.width, framebuffer.height);\n            // fbo.enableStencil();\n        }\n    }\n\n}\n"]}