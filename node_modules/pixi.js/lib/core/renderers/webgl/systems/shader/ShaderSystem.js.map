{"version":3,"sources":["../../../../../../src/core/renderers/webgl/systems/shader/ShaderSystem.js"],"names":["UID","ShaderSystem","renderer","gl","shader","program","id","contextChange","bind","dontSync","uniforms","globals","globalUniforms","glShader","glShaders","CONTEXT_UID","generateShader","syncUniformGroup","uniformGroup","setUniforms","syncUniforms","uniformData","group","getGLShader","static","dirtyId","uniformGroups","syncFunc","createSyncGroups","attribMap","i","attributeData","location","vertexSrc","fragmentSrc","PRECISION_FRAGMENT","destroy","destroyed"],"mappings":"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","file":"ShaderSystem.js","sourcesContent":["import WebGLSystem from '../WebGLSystem';\nimport GLShader from './GLShader';\nimport settings from '../../../../settings';\nimport generateUniformsSync from '../../../../shader/generateUniformsSync';\n\nlet UID = 0;\n\n/**\n * Helper class to create a webGL Texture\n *\n * @class\n * @memberof PIXI\n */\nexport default class ShaderSystem extends WebGLSystem\n{\n    /**\n     * @param {PIXI.WebGLRenderer} renderer - A reference to the current renderer\n     */\n    constructor(renderer)\n    {\n        super(renderer);\n\n        /**\n         * The current WebGL rendering context\n         *\n         * @member {WebGLRenderingContext}\n         */\n        this.gl = null;\n\n        this.shader = null;\n        this.program = null;\n\n        this.id = UID++;\n    }\n\n    contextChange(gl)\n    {\n        this.gl = gl;\n    }\n\n    /**\n     * Changes the current shader to the one given in parameter\n     *\n     * @param {PIXI.Shader} shader - the new shader\n     * @param {boolean} dontSync - false if the shader should automatically sync its uniforms.\n     * @returns {PIXI.glCore.GLShader} the glShader that belongs to the shader.\n     */\n    bind(shader, dontSync)\n    {\n        // maybe a better place for this...\n        shader.uniforms.globals = this.renderer.globalUniforms;\n\n        const program = shader.program;\n        const glShader = program.glShaders[this.renderer.CONTEXT_UID] || this.generateShader(shader);\n\n        this.shader = shader;\n\n        // TODO - some current pixi plugins bypass this.. so it not safe to use yet..\n        if (this.program !== program)\n        {\n            this.program = program;\n            glShader.bind();\n        }\n\n        if (!dontSync)\n        {\n            this.syncUniformGroup(shader.uniformGroup);\n        }\n\n        return glShader;\n    }\n\n    /**\n     * Uploads the uniforms values to the currently bound shader.\n     *\n     * @param {object} uniforms - the uniforms valiues that be applied to the current shader\n     */\n    setUniforms(uniforms)\n    {\n        const shader = this.shader.program;\n        const glShader = shader.glShaders[this.renderer.CONTEXT_UID];\n\n        shader.syncUniforms(glShader.uniformData, uniforms, this.renderer);\n    }\n\n    syncUniformGroup(group)\n    {\n        const glShader = this.getGLShader();\n\n        if (!group.static || group.dirtyId !== glShader.uniformGroups[group.id])\n        {\n            glShader.uniformGroups[group.id] = group.dirtyId;\n            const syncFunc = group.syncUniforms[this.shader.program.id] || this.createSyncGroups(group);\n\n            syncFunc(glShader.uniformData, group.uniforms, this.renderer);\n        }\n    }\n\n    createSyncGroups(group)\n    {\n        group.syncUniforms[this.shader.program.id] = generateUniformsSync(group, this.shader.program.uniformData);\n\n        return group.syncUniforms[this.shader.program.id];\n    }\n\n    /**\n     * Returns the underlying GLShade rof the currently bound shader.\n     * This can be handy for when you to have a little more control over the setting of your uniforms.\n     *\n     * @return {PIXI.glCore.Shader} the glShader for the currently bound Shader for this context\n     */\n    getGLShader()\n    {\n        if (this.shader)\n        {\n            return this.shader.program.glShaders[this.renderer.CONTEXT_UID];\n        }\n\n        return null;\n    }\n\n    /**\n     * Generates a GLShader verion of the Shader provided.\n     *\n     * @private\n     * @param {PIXI.Shader} shader the shader that the glShader will be based on.\n     * @return {PIXI.glCore.GLShader} A shiney new GLShader\n     */\n    generateShader(shader)\n    {\n        const program = shader.program;\n        const attribMap = {};\n\n        // insert the global properties too!\n\n        for (const i in program.attributeData)\n        {\n            attribMap[i] = program.attributeData[i].location;\n        }\n\n        const glShader = new GLShader(this.gl,\n                                      program.vertexSrc,\n                                      program.fragmentSrc,\n                                      settings.PRECISION_FRAGMENT,\n                                      attribMap);\n\n        program.glShaders[this.renderer.CONTEXT_UID] = glShader;\n\n        return glShader;\n    }\n\n    /**\n     * Destroys this System and removes all its textures\n     */\n    destroy()\n    {\n        // TODO implement destroy method for ShaderSystem\n        this.destroyed = true;\n    }\n}\n"]}