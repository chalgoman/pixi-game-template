{"version":3,"sources":["../../../../../../../src/core/renderers/webgl/systems/shader/shader/compileProgram.js"],"names":["compileProgram","gl","vertexSrc","fragmentSrc","attributeLocations","glVertShader","compileShader","VERTEX_SHADER","glFragShader","FRAGMENT_SHADER","program","createProgram","attachShader","i","bindAttribLocation","linkProgram","getProgramParameter","LINK_STATUS","console","error","VALIDATE_STATUS","getError","getProgramInfoLog","warn","deleteProgram","deleteShader","type","src","shader","createShader","shaderSource","getShaderParameter","COMPILE_STATUS","getShaderInfoLog"],"mappings":";;;kBASwBA,c;AATxB;;;;;;;;;AASe,SAASA,cAAT,CAAwBC,EAAxB,EAA4BC,SAA5B,EAAuCC,WAAvC,EAAoDC,kBAApD,EACf;AACI,QAAMC,eAAeC,cAAcL,EAAd,EAAkBA,GAAGM,aAArB,EAAoCL,SAApC,CAArB;AACA,QAAMM,eAAeF,cAAcL,EAAd,EAAkBA,GAAGQ,eAArB,EAAsCN,WAAtC,CAArB;;AAEA,QAAIO,UAAUT,GAAGU,aAAH,EAAd;;AAEAV,OAAGW,YAAH,CAAgBF,OAAhB,EAAyBL,YAAzB;AACAJ,OAAGW,YAAH,CAAgBF,OAAhB,EAAyBF,YAAzB;;AAEA;AACA,QAAIJ,kBAAJ,EACA;AACI,aAAK,IAAMS,CAAX,IAAgBT,kBAAhB,EACA;AACIH,eAAGa,kBAAH,CAAsBJ,OAAtB,EAA+BN,mBAAmBS,CAAnB,CAA/B,EAAsDA,CAAtD;AACH;AACJ;;AAEDZ,OAAGc,WAAH,CAAeL,OAAf;;AAEA;AACA,QAAI,CAACT,GAAGe,mBAAH,CAAuBN,OAAvB,EAAgCT,GAAGgB,WAAnC,CAAL,EACA;AACIC,gBAAQC,KAAR,CAAc,6CAAd;AACAD,gBAAQC,KAAR,CAAc,oBAAd,EAAoClB,GAAGe,mBAAH,CAAuBN,OAAvB,EAAgCT,GAAGmB,eAAnC,CAApC;AACAF,gBAAQC,KAAR,CAAc,eAAd,EAA+BlB,GAAGoB,QAAH,EAA/B;;AAEA;AACA,YAAIpB,GAAGqB,iBAAH,CAAqBZ,OAArB,MAAkC,EAAtC,EACA;AACIQ,oBAAQK,IAAR,CAAa,yCAAb,EAAwDtB,GAAGqB,iBAAH,CAAqBZ,OAArB,CAAxD;AACH;;AAEDT,WAAGuB,aAAH,CAAiBd,OAAjB;AACAA,kBAAU,IAAV;AACH;;AAED;AACAT,OAAGwB,YAAH,CAAgBpB,YAAhB;AACAJ,OAAGwB,YAAH,CAAgBjB,YAAhB;;AAEA,WAAOE,OAAP;AACH;;AAED;;;;;;;AAOA,SAASJ,aAAT,CAAuBL,EAAvB,EAA2ByB,IAA3B,EAAiCC,GAAjC,EACA;AACI,QAAMC,SAAS3B,GAAG4B,YAAH,CAAgBH,IAAhB,CAAf;;AAEAzB,OAAG6B,YAAH,CAAgBF,MAAhB,EAAwBD,GAAxB;AACA1B,OAAGK,aAAH,CAAiBsB,MAAjB;;AAEA,QAAI,CAAC3B,GAAG8B,kBAAH,CAAsBH,MAAtB,EAA8B3B,GAAG+B,cAAjC,CAAL,EACA;AACId,gBAAQK,IAAR,CAAaI,GAAb;AACAT,gBAAQC,KAAR,CAAclB,GAAGgC,gBAAH,CAAoBL,MAApB,CAAd;;AAEA,eAAO,IAAP;AACH;;AAED,WAAOA,MAAP;AACH","file":"compileProgram.js","sourcesContent":["/**\n * @class\n * @memberof PIXI.glCore.shader\n * @param gl {WebGLRenderingContext} The current WebGL context {WebGLProgram}\n * @param vertexSrc {string|string[]} The vertex shader source as an array of strings.\n * @param fragmentSrc {string|string[]} The fragment shader source as an array of strings.\n * @param attributeLocations {Object} An attribute location map that lets you manually set the attribute locations\n * @return {WebGLProgram} the shader program\n */\nexport default function compileProgram(gl, vertexSrc, fragmentSrc, attributeLocations)\n{\n    const glVertShader = compileShader(gl, gl.VERTEX_SHADER, vertexSrc);\n    const glFragShader = compileShader(gl, gl.FRAGMENT_SHADER, fragmentSrc);\n\n    let program = gl.createProgram();\n\n    gl.attachShader(program, glVertShader);\n    gl.attachShader(program, glFragShader);\n\n    // optionally, set the attributes manually for the program rather than letting WebGL decide..\n    if (attributeLocations)\n    {\n        for (const i in attributeLocations)\n        {\n            gl.bindAttribLocation(program, attributeLocations[i], i);\n        }\n    }\n\n    gl.linkProgram(program);\n\n    // if linking fails, then log and cleanup\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS))\n    {\n        console.error('Pixi.js Error: Could not initialize shader.');\n        console.error('gl.VALIDATE_STATUS', gl.getProgramParameter(program, gl.VALIDATE_STATUS));\n        console.error('gl.getError()', gl.getError());\n\n        // if there is a program info log, log it\n        if (gl.getProgramInfoLog(program) !== '')\n        {\n            console.warn('Pixi.js Warning: gl.getProgramInfoLog()', gl.getProgramInfoLog(program));\n        }\n\n        gl.deleteProgram(program);\n        program = null;\n    }\n\n    // clean up some shaders\n    gl.deleteShader(glVertShader);\n    gl.deleteShader(glFragShader);\n\n    return program;\n}\n\n/**\n * @private\n * @param gl {WebGLRenderingContext} The current WebGL context {WebGLProgram}\n * @param type {Number} the type, can be either VERTEX_SHADER or FRAGMENT_SHADER\n * @param vertexSrc {string|string[]} The vertex shader source as an array of strings.\n * @return {WebGLShader} the shader\n */\nfunction compileShader(gl, type, src)\n{\n    const shader = gl.createShader(type);\n\n    gl.shaderSource(shader, src);\n    gl.compileShader(shader);\n\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))\n    {\n        console.warn(src);\n        console.error(gl.getShaderInfoLog(shader));\n\n        return null;\n    }\n\n    return shader;\n}\n"]}