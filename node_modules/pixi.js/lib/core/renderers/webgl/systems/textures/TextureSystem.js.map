{"version":3,"sources":["../../../../../../src/core/renderers/webgl/systems/textures/TextureSystem.js"],"names":["TextureSystem","renderer","boundTextures","currentLocation","managedTextures","contextChange","gl","CONTEXT_UID","emptyTextures","TEXTURE_2D","fromData","TEXTURE_CUBE_MAP","bindTexture","texture","i","texImage2D","TEXTURE_CUBE_MAP_POSITIVE_X","RGBA","UNSIGNED_BYTE","texParameteri","TEXTURE_MAG_FILTER","LINEAR","TEXTURE_MIN_FILTER","maxTextures","getParameter","MAX_TEXTURE_IMAGE_UNITS","bind","location","activeTexture","TEXTURE0","baseTexture","valid","glTexture","_glTextures","initTexture","target","dirtyId","updateTexture","unbind","length","format","type","premultiplyAlpha","push","on","destroyTexture","texturePart","sides","resource","uploadable","side","source","width","height","TEXTURE_2D_ARRAY","texImage3D","array","loaded","texSubImage3D","upload","uploadData","setStyle","skipRemove","destroy","off","indexOf","TEXTURE_WRAP_S","wrapMode","TEXTURE_WRAP_T","mipmap","scaleMode","LINEAR_MIPMAP_LINEAR","NEAREST_MIPMAP_NEAREST","NEAREST"],"mappings":"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","file":"TextureSystem.js","sourcesContent":["import WebGLSystem from '../WebGLSystem';\nimport GLTexture from './GLTexture';\nimport { removeItems } from '../../../../utils';\n\n/**\n * @class\n * @extends PIXI.WebGLSystem\n * @memberof PIXI\n */\nexport default class TextureSystem extends WebGLSystem\n{\n    /**\n     * @param {PIXI.WebGLRenderer} renderer - The renderer this System works for.\n     */\n    constructor(renderer)\n    {\n        super(renderer);\n\n        // TODO set to max textures...\n        this.boundTextures = [\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n        ];\n\n        this.currentLocation = -1;\n\n        this.managedTextures = [];\n    }\n\n    /**\n     * Sets up the renderer context and necessary buffers.\n     *\n     * @private\n     */\n    contextChange()\n    {\n        const gl = this.gl = this.renderer.gl;\n\n        this.CONTEXT_UID = this.renderer.CONTEXT_UID;\n\n        // TODO move this.. to a nice make empty textures class..\n        this.emptyTextures = {};\n\n        this.emptyTextures[gl.TEXTURE_2D] = new GLTexture.fromData(this.gl, null, 1, 1);\n        this.emptyTextures[gl.TEXTURE_CUBE_MAP] = new GLTexture(this.gl);\n\n        gl.bindTexture(gl.TEXTURE_CUBE_MAP, this.emptyTextures[gl.TEXTURE_CUBE_MAP].texture);\n\n        let i;\n\n        for (i = 0; i < 6; i++)\n        {\n            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n        }\n\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n\n        var maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS)\n\n        for (i = 0; i < maxTextures; i++)\n        {\n            this.bind(null, i);\n        }\n    }\n\n    bind(texture, location)\n    {\n        const gl = this.gl;\n\n        location = location || 0;\n\n        if (this.currentLocation !== location)\n        {\n            this.currentLocation = location;\n            gl.activeTexture(gl.TEXTURE0 + location);\n        }\n\n        if (texture)\n        {\n            texture = texture.baseTexture || texture;\n\n            if (texture.valid)\n            {\n                const glTexture = texture._glTextures[this.CONTEXT_UID] || this.initTexture(texture);\n\n                gl.bindTexture(texture.target, glTexture.texture);\n\n                if (glTexture.dirtyId !== texture.dirtyId)\n                {\n                    glTexture.dirtyId = texture.dirtyId;\n                    this.updateTexture(texture);\n                }\n\n                this.boundTextures[location] = texture;\n            }\n        }\n        else\n        {\n            gl.bindTexture(gl.TEXTURE_2D, this.emptyTextures[gl.TEXTURE_2D].texture);\n            this.boundTextures[location] = null;\n        }\n    }\n\n    unbind(texture)\n    {\n        const gl = this.gl;\n\n        for (let i = 0; i < this.boundTextures.length; i++)\n        {\n            if (this.boundTextures[i] === texture)\n            {\n                if (this.currentLocation !== i)\n                {\n                    gl.activeTexture(gl.TEXTURE0 + i);\n                    this.currentLocation = i;\n                }\n\n                gl.bindTexture(gl.TEXTURE_2D, this.emptyTextures[texture.target].texture);\n                this.boundTextures[i] = null;\n            }\n        }\n    }\n\n    initTexture(texture)\n    {\n        const glTexture = new GLTexture(this.gl, -1, -1, texture.format, texture.type);\n\n        glTexture.premultiplyAlpha = texture.premultiplyAlpha;\n        // guarentee an update..\n        glTexture.dirtyId = -1;\n\n        texture._glTextures[this.CONTEXT_UID] = glTexture;\n\n        this.managedTextures.push(texture);\n        texture.on('dispose', this.destroyTexture, this);\n\n        return glTexture;\n    }\n\n    updateTexture(texture)\n    {\n        const glTexture = texture._glTextures[this.CONTEXT_UID];\n        const gl = this.gl;\n\n        let i;\n        let texturePart;\n\n        // TODO there are only 3 textures as far as im aware?\n        // Cube / 2D and later 3d. (the latter is WebGL2, we will get to that soon!)\n        if (texture.target === gl.TEXTURE_CUBE_MAP)\n        {\n           // console.log( gl.UNSIGNED_BYTE)\n            for (i = 0; i < texture.sides.length; i++)\n            {\n                // TODO - we should only upload what changed..\n                // but im sure this is not  going to be a problem just yet!\n                texturePart = texture.sides[i];\n\n                if (texturePart.resource)\n                {\n                    if (texturePart.resource.uploadable)\n                    {\n                        gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + texturePart.side,\n                                      0,\n                                      texture.format,\n                                      texture.format,\n                                      texture.type,\n                                      texturePart.resource.source);\n                    }\n                    else\n                    {\n                        gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + texturePart.side,\n                                  0,\n                                  texture.format,\n                                  texture.width,\n                                  texture.height,\n                                  0,\n                                  texture.format,\n                                  texture.type,\n                                  texturePart.resource.source);\n                    }\n                }\n                else\n                {\n                    gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + texturePart.side,\n                                  0,\n                                  texture.format,\n                                  texture.width,\n                                  texture.height,\n                                  0,\n                                  texture.format,\n                                  texture.type,\n                                  null);\n                }\n            }\n        }\n        else if (texture.target === gl.TEXTURE_2D_ARRAY)\n        {\n            gl.texImage3D(gl.TEXTURE_2D_ARRAY,\n                              0,\n                              texture.format,\n                              texture.width,\n                              texture.height,\n                              6,\n                              0,\n                              texture.format,\n                              texture.type,\n                              null);\n\n            for (i = 0; i < texture.array.length; i++)\n            {\n                // TODO - we should only upload what changed..\n                // but im sure this is not  going to be a problem just yet!\n                texturePart = texture.array[i];\n\n                if (texturePart.resource)\n                {\n                    if (texturePart.resource.loaded)\n                    {\n                        gl.texSubImage3D(gl.TEXTURE_2D_ARRAY,\n                                  0,\n                                  0, // xoffset\n                                  0, // yoffset\n                                  i, // zoffset\n                                  texturePart.resource.width,\n                                  texturePart.resource.height,\n                                  1,\n                                  texture.format,\n                                  texture.type,\n                                  texturePart.resource.source);\n                    }\n                }\n            }\n        }\n        else\n        if (texture.resource)\n            {\n            if (texture.resource.uploadable)\n                {\n                glTexture.upload(texture.resource.source);\n            }\n            else\n                {\n                glTexture.uploadData(texture.resource.source, texture.width, texture.height);\n            }\n        }\n            else\n            {\n            glTexture.uploadData(null, texture.width, texture.height);\n        }\n\n        // lets only update what changes..\n        this.setStyle(texture);\n    }\n\n    /**\n     * Deletes the texture from WebGL\n     *\n     * @param {PIXI.BaseTexture|PIXI.Texture} texture - the texture to destroy\n     * @param {boolean} [skipRemove=false] - Whether to skip removing the texture from the TextureManager.\n     */\n    destroyTexture(texture, skipRemove)\n    {\n        texture = texture.baseTexture || texture;\n\n        if (texture._glTextures[this.renderer.CONTEXT_UID])\n        {\n            this.unbind(texture);\n\n            texture._glTextures[this.renderer.CONTEXT_UID].destroy();\n            texture.off('dispose', this.destroyTexture, this);\n\n            delete texture._glTextures[this.renderer.CONTEXT_UID];\n\n            if (!skipRemove)\n            {\n                const i = this.managedTextures.indexOf(texture);\n\n                if (i !== -1)\n                {\n                    removeItems(this.managedTextures, i, 1);\n                }\n            }\n        }\n    }\n\n    setStyle(texture)\n    {\n        const gl = this.gl;\n\n        gl.texParameteri(texture.target, gl.TEXTURE_WRAP_S, texture.wrapMode);\n        gl.texParameteri(texture.target, gl.TEXTURE_WRAP_T, texture.wrapMode);\n\n        if (texture.mipmap)\n        {\n            /* eslint-disable max-len */\n            gl.texParameteri(texture.target, gl.TEXTURE_MIN_FILTER, texture.scaleMode ? gl.LINEAR_MIPMAP_LINEAR : gl.NEAREST_MIPMAP_NEAREST);\n            /* eslint-disable max-len */\n        }\n        else\n        {\n            gl.texParameteri(texture.target, gl.TEXTURE_MIN_FILTER, texture.scaleMode ? gl.LINEAR : gl.NEAREST);\n        }\n\n        gl.texParameteri(texture.target, gl.TEXTURE_MAG_FILTER, texture.scaleMode ? gl.LINEAR : gl.NEAREST);\n    }\n}\n"]}