{"version":3,"sources":["../../../../../src/core/renderers/webgl/systems/RenderTextureSystem.js"],"names":["tempRect","RenderTextureSystem","renderer","clearColor","_backgroundColorRgba","defaultMaskStack","bind","renderTexture","current","baseTexture","framebuffer","frameBuffer","projection","update","frame","resolution","stencil","setMaskStack","stencilMaskStack","width","height","clear","resize"],"mappings":";;;;AAAA;;;;AACA;;;;;;;;;;AAEA,IAAMA,WAAW,qBAAjB;;AAEA;;;;;;IAMqBC,mB;;;AAEjB;;;AAGA,iCAAYC,QAAZ,EACA;AAAA;;AAAA,qDACI,wBAAMA,QAAN,CADJ;;AAGI,cAAKC,UAAL,GAAkBD,SAASE,oBAA3B;;AAEA;AACA,cAAKC,gBAAL,GAAwB,EAAxB;;AAEA;AARJ;AASC;;kCAEDC,I,iBAAKC,a,EACL;AACI;AACA,YAAI,KAAKA,aAAL,KAAuBA,aAA3B,EAA0C;AAC1C,aAAKA,aAAL,GAAqBA,aAArB;AACA,aAAKC,OAAL,GAAeD,aAAf;;AAEA,YAAML,WAAW,KAAKA,QAAtB;;AAEA,YAAIK,aAAJ,EACA;AACI,gBAAME,cAAcF,cAAcE,WAAlC;;AAEA,iBAAKP,QAAL,CAAcQ,WAAd,CAA0BJ,IAA1B,CAA+BG,YAAYE,WAA3C;AACA,iBAAKT,QAAL,CAAcU,UAAd,CAAyBC,MAAzB,CAAgCN,cAAcO,KAA9C,EAAqDP,cAAcO,KAAnE,EAA0EL,YAAYM,UAAtF,EAAkG,KAAlG;AACA,iBAAKb,QAAL,CAAcc,OAAd,CAAsBC,YAAtB,CAAmCR,YAAYS,gBAA/C;AACH,SAPD,MASA;AACIhB,qBAASQ,WAAT,CAAqBJ,IAArB,CAA0B,IAA1B;;AAEAN,qBAASmB,KAAT,GAAiBjB,SAASiB,KAA1B;AACAnB,qBAASoB,MAAT,GAAkBlB,SAASkB,MAA3B;;AAEA;AACA,iBAAKlB,QAAL,CAAcU,UAAd,CAAyBC,MAAzB,CAAgCb,QAAhC,EAA0CA,QAA1C,EAAoD,KAAKE,QAAL,CAAca,UAAlE,EAA8E,IAA9E;AACA,iBAAKb,QAAL,CAAcc,OAAd,CAAsBC,YAAtB,CAAmC,KAAKZ,gBAAxC;AACH;AACJ,K;;AAED;;;;;;;;kCAMAgB,K,kBAAMlB,U,EACN;AACI,YAAI,KAAKI,aAAT,EACA;AACIJ,yBAAaA,cAAc,KAAKI,aAAL,CAAmBE,WAAnB,CAA+BN,UAA1D;AACH,SAHD,MAKA;AACIA,yBAAaA,cAAc,KAAKA,UAAhC;AACH;;AAED,aAAKD,QAAL,CAAcQ,WAAd,CAA0BW,KAA1B,CAAgClB,WAAW,CAAX,CAAhC,EAA+CA,WAAW,CAAX,CAA/C,EAA8DA,WAAW,CAAX,CAA9D,EAA6EA,WAAW,CAAX,CAA7E;AACH,K;;kCAEDmB,M,qBAAQ;AACR;AACI;AACA,aAAKhB,IAAL,CAAU,IAAV;AACH,K;;;;;kBAvEgBL,mB","file":"RenderTextureSystem.js","sourcesContent":["import WebGLSystem from './WebGLSystem';\nimport { Rectangle } from '../../../math';\n\nconst tempRect = new Rectangle();\n\n/**\n * @class\n * @extends PIXI.WebGLSystem\n * @memberof PIXI\n */\n\nexport default class RenderTextureSystem extends WebGLSystem\n{\n    /**\n     * @param {PIXI.WebGLRenderer} renderer - The renderer this System works for.\n     */\n    constructor(renderer)\n    {\n        super(renderer);\n\n        this.clearColor = renderer._backgroundColorRgba;\n\n        // TODO moe this property somewhere else!\n        this.defaultMaskStack = [];\n\n        // empty render texture?\n    }\n\n    bind(renderTexture)\n    {\n        // TODO - do we want this??\n        if (this.renderTexture === renderTexture) return;\n        this.renderTexture = renderTexture;\n        this.current = renderTexture;\n\n        const renderer = this.renderer;\n\n        if (renderTexture)\n        {\n            const baseTexture = renderTexture.baseTexture;\n\n            this.renderer.framebuffer.bind(baseTexture.frameBuffer);\n            this.renderer.projection.update(renderTexture.frame, renderTexture.frame, baseTexture.resolution, false);\n            this.renderer.stencil.setMaskStack(baseTexture.stencilMaskStack);\n        }\n        else\n        {\n            renderer.framebuffer.bind(null);\n\n            tempRect.width = renderer.width;\n            tempRect.height = renderer.height;\n\n            // TODO store this..\n            this.renderer.projection.update(tempRect, tempRect, this.renderer.resolution, true);\n            this.renderer.stencil.setMaskStack(this.defaultMaskStack);\n        }\n    }\n\n    /**\n     * Erases the render texture and fills the drawing area with a colour\n     *\n     * @param {number} [clearColor] - The colour\n     * @return {PIXI.WebGLRenderer} Returns itself.\n     */\n    clear(clearColor)\n    {\n        if (this.renderTexture)\n        {\n            clearColor = clearColor || this.renderTexture.baseTexture.clearColor;\n        }\n        else\n        {\n            clearColor = clearColor || this.clearColor;\n        }\n\n        this.renderer.framebuffer.clear(clearColor[0], clearColor[1], clearColor[2], clearColor[3]);\n    }\n\n    resize()// screenWidth, screenHeight)\n    {\n        // resize the root only!\n        this.bind(null);\n    }\n}\n"]}