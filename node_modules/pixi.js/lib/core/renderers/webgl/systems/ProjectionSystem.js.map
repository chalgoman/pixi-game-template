{"version":3,"sources":["../../../../../src/core/renderers/webgl/systems/ProjectionSystem.js"],"names":["ProjectionSystem","renderer","projectionMatrix","update","destinationFrame","sourceFrame","resolution","root","defaultFrame","calculateProjection","globalUniforms","uniforms","pm","identity","a","width","d","height","tx","x","ty","y","setTransform"],"mappings":";;;;AAAA;;;;AACA;;;;;;;;;;AAEA;;;;;;IAMqBA,gB;;;AAEjB;;;AAGA,8BAAYC,QAAZ,EACA;AAAA;;AAAA,qDACI,wBAAMA,QAAN,CADJ;;AAGI,cAAKC,gBAAL,GAAwB,kBAAxB;AAHJ;AAIC;;+BAEDC,M,mBAAOC,gB,EAAkBC,W,EAAaC,U,EAAYC,I,EAClD;AACI,aAAKH,gBAAL,GAAwBA,oBAAoB,KAAKA,gBAAzB,IAA6C,KAAKI,YAA1E;AACA,aAAKH,WAAL,GAAmBA,eAAe,KAAKA,WAApB,IAAmCD,gBAAtD;;AAEA,aAAKK,mBAAL,CAAyB,KAAKL,gBAA9B,EAAgD,KAAKC,WAArD,EAAkEC,UAAlE,EAA8EC,IAA9E;;AAEA,aAAKN,QAAL,CAAcS,cAAd,CAA6BC,QAA7B,CAAsCT,gBAAtC,GAAyD,KAAKA,gBAA9D;AACA,aAAKD,QAAL,CAAcS,cAAd,CAA6BP,MAA7B;AACH,K;;AAED;;;;;;;;+BAMAM,mB,gCAAoBL,gB,EAAkBC,W,EAAaC,U,EAAYC,I,EAC/D;AACI,YAAMK,KAAK,KAAKV,gBAAhB;;AAEAU,WAAGC,QAAH;;AAEA;AACA,YAAI,CAACN,IAAL,EACA;AACIK,eAAGE,CAAH,GAAO,IAAIV,iBAAiBW,KAArB,GAA6B,CAApC;AACAH,eAAGI,CAAH,GAAO,IAAIZ,iBAAiBa,MAArB,GAA8B,CAArC;;AAEAL,eAAGM,EAAH,GAAQ,CAAC,CAAD,GAAMb,YAAYc,CAAZ,GAAgBP,GAAGE,CAAjC;AACAF,eAAGQ,EAAH,GAAQ,CAAC,CAAD,GAAMf,YAAYgB,CAAZ,GAAgBT,GAAGI,CAAjC;AACH,SAPD,MASA;AACIJ,eAAGE,CAAH,GAAO,IAAIV,iBAAiBW,KAArB,GAA6B,CAApC;AACAH,eAAGI,CAAH,GAAO,CAAC,CAAD,GAAKZ,iBAAiBa,MAAtB,GAA+B,CAAtC;;AAEAL,eAAGM,EAAH,GAAQ,CAAC,CAAD,GAAMb,YAAYc,CAAZ,GAAgBP,GAAGE,CAAjC;AACAF,eAAGQ,EAAH,GAAQ,IAAKf,YAAYgB,CAAZ,GAAgBT,GAAGI,CAAhC;AACH;;AAED;AACA;AACAJ,WAAGE,CAAH,IAAQR,UAAR;AACAM,WAAGI,CAAH,IAAQV,UAAR;AACH,K;;AAED;;;;;;;+BAKAgB,Y,2BAAc;AACd;AACG;AACF,K;;;;;kBAnEgBtB,gB","file":"ProjectionSystem.js","sourcesContent":["import WebGLSystem from './WebGLSystem';\nimport { Matrix } from '../../../math';\n\n/**\n * @class\n * @extends PIXI.WebGLSystem\n * @memberof PIXI\n */\n\nexport default class ProjectionSystem extends WebGLSystem\n{\n    /**\n     * @param {PIXI.WebGLRenderer} renderer - The renderer this System works for.\n     */\n    constructor(renderer)\n    {\n        super(renderer);\n\n        this.projectionMatrix = new Matrix();\n    }\n\n    update(destinationFrame, sourceFrame, resolution, root)\n    {\n        this.destinationFrame = destinationFrame || this.destinationFrame || this.defaultFrame;\n        this.sourceFrame = sourceFrame || this.sourceFrame || destinationFrame;\n\n        this.calculateProjection(this.destinationFrame, this.sourceFrame, resolution, root);\n\n        this.renderer.globalUniforms.uniforms.projectionMatrix = this.projectionMatrix;\n        this.renderer.globalUniforms.update();\n    }\n\n    /**\n     * Updates the projection matrix based on a projection frame (which is a rectangle)\n     *\n     * @param {Rectangle} destinationFrame - The destination frame.\n     * @param {Rectangle} sourceFrame - The source frame.\n     */\n    calculateProjection(destinationFrame, sourceFrame, resolution, root)\n    {\n        const pm = this.projectionMatrix;\n\n        pm.identity();\n\n        // TODO: make dest scale source\n        if (!root)\n        {\n            pm.a = 1 / destinationFrame.width * 2;\n            pm.d = 1 / destinationFrame.height * 2;\n\n            pm.tx = -1 - (sourceFrame.x * pm.a);\n            pm.ty = -1 - (sourceFrame.y * pm.d);\n        }\n        else\n        {\n            pm.a = 1 / destinationFrame.width * 2;\n            pm.d = -1 / destinationFrame.height * 2;\n\n            pm.tx = -1 - (sourceFrame.x * pm.a);\n            pm.ty = 1 - (sourceFrame.y * pm.d);\n        }\n\n        // apply the resolution..\n        // TODO - prob should apply this to x and y too!\n        pm.a *= resolution;\n        pm.d *= resolution;\n    }\n\n    /**\n     * Sets the transform of the active render target to the given matrix\n     *\n     * @param {PIXI.Matrix} matrix - The transformation matrix\n     */\n    setTransform()// matrix)\n    {\n       // this._activeRenderTarget.transform = matrix;\n    }\n\n}\n"]}