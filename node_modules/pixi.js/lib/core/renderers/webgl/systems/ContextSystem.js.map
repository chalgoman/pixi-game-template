{"version":3,"sources":["../../../../../src/core/renderers/webgl/systems/ContextSystem.js"],"names":["CONTEXT_UID","ContextSystem","renderer","webGLVersion","handleContextLost","bind","handleContextRestored","extensions","view","addEventListener","contextChange","gl","isContextLost","getExtension","restoreContext","initFromContext","validateContext","runners","run","initFromOptions","options","createContext","canvas","PREFER_WEBGL_2","getContext","Error","getExtensions","drawBuffers","depthTexture","floatTexture","loseContext","vertexArrayObject","event","preventDefault","destroy","removeEventListener","useProgram","postrender","flush","attributes","getContextAttributes","stencil","console","warn"],"mappings":"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","file":"ContextSystem.js","sourcesContent":["import WebGLSystem from './WebGLSystem';\nimport settings from '../../../settings';\n\nlet CONTEXT_UID = 0;\n\n/**\n * @class\n * @extends PIXI.WebGLSystem\n * @memberof PIXI\n */\nexport default class ContextSystem extends WebGLSystem\n{\n    /**\n     * @param {PIXI.WebGLRenderer} renderer - The renderer this System works for.\n     */\n    constructor(renderer)\n    {\n        super(renderer);\n\n        this.webGLVersion = 1;\n\n        this.handleContextLost = this.handleContextLost.bind(this);\n        this.handleContextRestored = this.handleContextRestored.bind(this);\n\n        this.extensions = {};\n\n        renderer.view.addEventListener('webglcontextlost', this.handleContextLost, false);\n        renderer.view.addEventListener('webglcontextrestored', this.handleContextRestored, false);\n    }\n\n    get isLost()\n    {\n        return (!this.gl || this.gl.isContextLost());\n    }\n\n    contextChange(gl)\n    {\n        this.gl = gl;\n\n        // restore a context if it was previously lost\n        if (gl.isContextLost() && gl.getExtension('WEBGL_lose_context'))\n        {\n            gl.getExtension('WEBGL_lose_context').restoreContext();\n        }\n    }\n\n    initFromContext(gl)\n    {\n        this.gl = gl;\n        this.validateContext(gl);\n        this.renderer.gl = gl;\n        this.renderer.CONTEXT_UID = CONTEXT_UID++;\n        this.renderer.runners.contextChange.run(gl);\n    }\n\n    initFromOptions(options)\n    {\n        const gl = this.createContext(this.renderer.view, options);\n\n        this.initFromContext(gl);\n    }\n\n    /**\n     * Helper class to create a webGL Context\n     *\n     * @class\n     * @memberof PIXI.glCore\n     * @param canvas {HTMLCanvasElement} the canvas element that we will get the context from\n     * @param options {Object} An options object that gets passed in to the canvas element containing the context attributes,\n     * see https://developer.mozilla.org/en/docs/Web/API/HTMLCanvasElement/getContext for the options available\n     * @return {WebGLRenderingContext} the WebGL context\n     */\n    createContext(canvas, options)\n    {\n        let gl;\n\n        if (settings.PREFER_WEBGL_2)\n        {\n            gl = canvas.getContext('webgl2', options);\n        }\n\n        if (gl)\n        {\n            this.webGLVersion = 2;\n        }\n        else\n        {\n            this.webGLVersion = 1;\n\n            gl = canvas.getContext('webgl', options)\n            || canvas.getContext('experimental-webgl', options);\n\n            if (!gl)\n            {\n                // fail, not able to get a context\n                throw new Error('This browser does not support webGL. Try using the canvas renderer');\n            }\n        }\n\n        this.gl = gl;\n\n        this.getExtensions();\n\n        return gl;\n    }\n\n    getExtensions()\n    {\n        // time to set up default etensions that pixi uses..\n        const gl = this.gl;\n        const extensions = this.extensions;\n\n        if (this.webGLVersion === 1)\n        {\n            extensions.drawBuffers = gl.getExtension('WEBGL_draw_buffers');\n            extensions.depthTexture = gl.getExtension('WEBKIT_WEBGL_depth_texture');\n            extensions.floatTexture = gl.getExtension('OES_texture_float');\n            extensions.loseContext = gl.getExtension('WEBGL_lose_context');\n\n            extensions.vertexArrayObject = gl.getExtension('OES_vertex_array_object')\n                                        || gl.getExtension('MOZ_OES_vertex_array_object')\n                                        || gl.getExtension('WEBKIT_OES_vertex_array_object');\n        }\n\n        // we don't use any specific WebGL 2 ones yet!\n    }\n\n    /**\n     * Handles a lost webgl context\n     *\n     * @private\n     * @param {WebGLContextEvent} event - The context lost event.\n     */\n    handleContextLost(event)\n    {\n        event.preventDefault();\n    }\n\n    /**\n     * Handles a restored webgl context\n     *\n     * @private\n     */\n    handleContextRestored()\n    {\n        this.renderer.runners.contextChange.run(this.gl);\n    }\n\n    destroy()\n    {\n        const view = this.renderer.view;\n\n        // remove listeners\n        view.removeEventListener('webglcontextlost', this.handleContextLost);\n        view.removeEventListener('webglcontextrestored', this.handleContextRestored);\n\n        this.gl.useProgram(null);\n\n        if (this.extensions.loseContext)\n        {\n            this.extensions.loseContext.loseContext();\n        }\n    }\n\n    postrender()\n    {\n        this.gl.flush();\n    }\n\n    validateContext(gl)\n    {\n        const attributes = gl.getContextAttributes();\n\n        // this is going to be fairly simple for now.. but at least we have room to grow!\n        if (!attributes.stencil)\n        {\n            /* eslint-disable max-len */\n\n            /* eslint-disable no-console */\n            console.warn('Provided WebGL context does not have a stencil buffer, masks may not render correctly');\n            /* eslint-enable no-console */\n\n            /* eslint-enable max-len */\n        }\n    }\n}\n"]}