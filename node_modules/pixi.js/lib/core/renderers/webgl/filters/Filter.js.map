{"version":3,"sources":["../../../../../src/core/renderers/webgl/filters/Filter.js"],"names":["Filter","vertexSrc","fragmentSrc","uniforms","program","from","blendMode","NORMAL","padding","resolution","RESOLUTION","enabled","autoFit","apply","filterManager","input","output","clear","currentState","applyFilter"],"mappings":";;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;;;;;;;;;AAEA;AACA;;;;;IAKqBA,M;;;AAEjB;;;;;AAKA,kBAAYC,SAAZ,EAAuBC,WAAvB,EAAoCC,QAApC,EACA;AAAA;;AACI,QAAMC,UAAU,kBAAQC,IAAR,CAAaJ,SAAb,EAAwBC,WAAxB,CAAhB;;AADJ,iDAGI,mBAAME,OAAN,EAAeD,QAAf,CAHJ;;AAKI,UAAKG,SAAL,GAAiB,mBAAYC,MAA7B;;AAEA;;;;;;;AAOA,UAAKC,OAAL,GAAe,CAAf;;AAEA;;;;;;AAMA,UAAKC,UAAL,GAAkB,mBAASC,UAA3B;;AAEA;;;;;AAKA,UAAKC,OAAL,GAAe,IAAf;;AAEA;;;;;;AAMA,UAAKC,OAAL,GAAe,IAAf;AArCJ;AAsCC;;AAED;;;;;;;;;;;;;mBAWAC,K,kBAAMC,a,EAAeC,K,EAAOC,M,EAAQC,K,EAAOC,Y,EAAc;AACzD;AACI;;AAEAJ,kBAAcK,WAAd,CAA0B,IAA1B,EAAgCJ,KAAhC,EAAuCC,MAAvC,EAA+CC,KAA/C,EAAsDC,YAAtD;;AAEA;AACH,G;;;;;kBAlEgBlB,M","file":"Filter.js","sourcesContent":["import Shader from '../../../shader/Shader';\nimport Program from '../../../shader/Program';\nimport { BLEND_MODES } from '../../../const';\nimport settings from '../../../settings';\n\n// let math = require('../../../math');\n/**\n * @class\n * @memberof PIXI\n * @extends PIXI.Shader\n */\nexport default class Filter extends Shader\n{\n    /**\n     * @param {string} [vertexSrc] - The source of the vertex shader.\n     * @param {string} [fragmentSrc] - The source of the fragment shader.\n     * @param {object} [uniforms] - Custom uniforms to use to augment the built-in ones.\n     */\n    constructor(vertexSrc, fragmentSrc, uniforms)\n    {\n        const program = Program.from(vertexSrc, fragmentSrc);\n\n        super(program, uniforms);\n\n        this.blendMode = BLEND_MODES.NORMAL;\n\n        /**\n         * The padding of the filter. Some filters require extra space to breath such as a blur.\n         * Increasing this will add extra width and height to the bounds of the object that the\n         * filter is applied to.\n         *\n         * @member {number}\n         */\n        this.padding = 4;\n\n        /**\n         * The resolution of the filter. Setting this to be lower will lower the quality but\n         * increase the performance of the filter.\n         *\n         * @member {number}\n         */\n        this.resolution = settings.RESOLUTION;\n\n        /**\n         * If enabled is true the filter is applied, if false it will not.\n         *\n         * @member {boolean}\n         */\n        this.enabled = true;\n\n        /**\n         * If enabled, pixi will fit the filter area into boundaries for better performance.\n         * Switch it off if it does not work for specific shader.\n         *\n         * @member {boolean}\n         */\n        this.autoFit = true;\n    }\n\n    /**\n     * Applies the filter\n     *\n     * @param {PIXI.FilterManager} filterManager - The renderer to retrieve the filter from\n     * @param {PIXI.RenderTarget} input - The input render target.\n     * @param {PIXI.RenderTarget} output - The target to output to.\n     * @param {boolean} clear - Should the output be cleared before rendering to it\n     * @param {object} [currentState] - It's current state of filter.\n     *        There are some useful properties in the currentState :\n     *        target, filters, sourceFrame, destinationFrame, renderTarget, resolution\n     */\n    apply(filterManager, input, output, clear, currentState) // eslint-disable-line no-unused-vars\n    {\n        // do as you please!\n\n        filterManager.applyFilter(this, input, output, clear, currentState);\n\n        // or just do a regular render..\n    }\n}\n"]}