{"version":3,"sources":["../../../src/core/utils/interleaveTypedArrays.js"],"names":["interleaveTypedArrays","map","Float32Array","Uint32Array","Int32Array","Uint8Array","arrays","sizes","outSize","stride","views","i","length","buffer","ArrayBuffer","out","littleOffset","size","array","type","j","indexStart","index"],"mappings":";;;kBAKwBA,qB;;AALxB;;;;;;AAEA;AACA,IAAMC,MAAM,EAAEC,cAAcA,YAAhB,EAA8BC,aAAaA,WAA3C,EAAwDC,YAAYA,UAApE,EAAgFC,YAAYA,UAA5F,EAAZ;;AAEe,SAASL,qBAAT,CAA+BM,MAA/B,EAAuCC,KAAvC,EACf;AACI,QAAIC,UAAU,CAAd;AACA,QAAIC,SAAS,CAAb;AACA,QAAMC,QAAQ,EAAd;;AAEA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIL,OAAOM,MAA3B,EAAmCD,GAAnC,EACA;AACIF,kBAAUF,MAAMI,CAAN,CAAV;AACAH,mBAAWF,OAAOK,CAAP,EAAUC,MAArB;AACH;;AAED,QAAMC,SAAS,IAAIC,WAAJ,CAAgBN,UAAU,CAA1B,CAAf;;AAEA,QAAIO,MAAM,IAAV;AACA,QAAIC,eAAe,CAAnB;;AAEA,SAAK,IAAIL,KAAI,CAAb,EAAgBA,KAAIL,OAAOM,MAA3B,EAAmCD,IAAnC,EACA;AACI,YAAMM,OAAOV,MAAMI,EAAN,CAAb;AACA,YAAMO,QAAQZ,OAAOK,EAAP,CAAd;;AAEA,YAAMQ,OAAO,6BAAcD,KAAd,CAAb;;AAEA,YAAI,CAACR,MAAMS,IAAN,CAAL,EACA;AACIT,kBAAMS,IAAN,IAAc,IAAIlB,IAAIkB,IAAJ,CAAJ,CAAcN,MAAd,CAAd;AACH;;AAEDE,cAAML,MAAMS,IAAN,CAAN;;AAEA,aAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,MAAMN,MAA1B,EAAkCQ,GAAlC,EACA;AACI,gBAAMC,aAAc,CAACD,IAAIH,IAAJ,GAAW,CAAZ,IAAiBR,MAAlB,GAA4BO,YAA/C;AACA,gBAAMM,QAAQF,IAAIH,IAAlB;;AAEAF,gBAAIM,aAAaC,KAAjB,IAA0BJ,MAAME,CAAN,CAA1B;AACH;;AAEDJ,wBAAgBC,IAAhB;AACH;;AAED,WAAO,IAAIf,YAAJ,CAAiBW,MAAjB,CAAP;AACH","file":"interleaveTypedArrays.js","sourcesContent":["import getBufferType from './getBufferType';\n\n/* eslint-disable object-shorthand */\nconst map = { Float32Array: Float32Array, Uint32Array: Uint32Array, Int32Array: Int32Array, Uint8Array: Uint8Array };\n\nexport default function interleaveTypedArrays(arrays, sizes)\n{\n    let outSize = 0;\n    let stride = 0;\n    const views = {};\n\n    for (let i = 0; i < arrays.length; i++)\n    {\n        stride += sizes[i];\n        outSize += arrays[i].length;\n    }\n\n    const buffer = new ArrayBuffer(outSize * 4);\n\n    let out = null;\n    let littleOffset = 0;\n\n    for (let i = 0; i < arrays.length; i++)\n    {\n        const size = sizes[i];\n        const array = arrays[i];\n\n        const type = getBufferType(array);\n\n        if (!views[type])\n        {\n            views[type] = new map[type](buffer);\n        }\n\n        out = views[type];\n\n        for (let j = 0; j < array.length; j++)\n        {\n            const indexStart = ((j / size | 0) * stride) + littleOffset;\n            const index = j % size;\n\n            out[indexStart + index] = array[j];\n        }\n\n        littleOffset += size;\n    }\n\n    return new Float32Array(buffer);\n}\n"]}