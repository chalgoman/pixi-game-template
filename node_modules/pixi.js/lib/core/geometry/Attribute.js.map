{"version":3,"sources":["../../../src/core/geometry/Attribute.js"],"names":["Attribute","buffer","size","normalised","type","stride","start","instance","normalized","destroy","from","module","exports"],"mappings":";;;;AAAA;;AAEA;;;;;;;;IAQMA,S;AAEF;;;;;;;;AAQA,qBAAYC,MAAZ,EAAoBC,IAApB,EACA;AAAA,QAD0BC,UAC1B,uEADuC,KACvC;AAAA,QAD8CC,IAC9C,uEADqD,IACrD;AAAA,QAD2DC,MAC3D;AAAA,QADmEC,KACnE;AAAA,QAD0EC,QAC1E;;AAAA;;AACI,SAAKN,MAAL,GAAcA,MAAd;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKM,UAAL,GAAkBL,UAAlB;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACH;;AAED;;;;;sBAGAE,O,sBACA;AACI,SAAKR,MAAL,GAAc,IAAd;AACH,G;;AAED;;;;;;;;;;;;;;YAYOS,I,iBAAKT,M,EAAQC,I,EAAMG,M,EAAQC,K,EAAOH,U,EACzC;AACI,WAAO,IAAIH,SAAJ,CAAcC,MAAd,EAAsBC,IAAtB,EAA4BG,MAA5B,EAAoCC,KAApC,EAA2CH,UAA3C,CAAP;AACH,G;;;;;AAGLQ,OAAOC,OAAP,GAAiBZ,SAAjB","file":"Attribute.js","sourcesContent":["/* eslint-disable max-len */\n\n/**\n * holds the information for a single attribute structure required to render geometry.\n * this does not conatina the actul data, but instead has a buffer id that maps to a {PIXI.mesh.Buffer}\n * This can include anything from positions, uvs, normals, colors etc..\n *\n * @class\n * @memberof PIXI.mesh.Attribute\n */\nclass Attribute\n{\n    /**\n     * @param {string} buffer  the id of the buffer that this attribute will look for\n     * @param {Number} [size=0] the size of the attribute. If you hava 2 floats per vertex (eg position x and y) this would be 2.\n     * @param {Boolean} [normalised=false] should the data be normalised.\n     * @param {Number} [type=PIXI.TYPES.FLOAT] what type of numbe is the attribute. Check {PIXI.TYPES} to see the ones available\n     * @param {Number} [stride=0] How far apart (in floats) the start of each value is. (used for interleaving data)\n     * @param {Number} [start=0] How far into the array to start reading values (used for interleaving data)\n     */\n    constructor(buffer, size, normalised = false, type = 5126, stride, start, instance)\n    {\n        this.buffer = buffer;\n        this.size = size;\n        this.normalized = normalised;\n        this.type = type;\n        this.stride = stride;\n        this.start = start;\n        this.instance = instance;\n    }\n\n    /**\n     * Destroys the Attribute.\n     */\n    destroy()\n    {\n        this.buffer = null;\n    }\n\n    /**\n     * Helper function that creates an Attribute based on the information provided\n     *\n     * @static\n     * @param {string} buffer  the id of the buffer that this attribute will look for\n     * @param {Number} [size=2] the size of the attribute. If you hava 2 floats per vertex (eg position x and y) this would be 2\n     * @param {Number} [stride=0] How far apart (in floats) the start of each value is. (used for interleaving data)\n     * @param {Number} [start=0] How far into the array to start reading values (used for interleaving data)\n     * @param {Boolean} [normalised=false] should the data be normalised.\n     *\n     * @returns {PIXI.mesh.Attribute} A new {PIXI.mesh.Attribute} based on the information provided\n     */\n    static from(buffer, size, stride, start, normalised)\n    {\n        return new Attribute(buffer, size, stride, start, normalised);\n    }\n}\n\nmodule.exports = Attribute;\n"]}