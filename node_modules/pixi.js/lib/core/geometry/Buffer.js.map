{"version":3,"sources":["../../../src/core/geometry/Buffer.js"],"names":["UID","Buffer","data","_static","index","Float32Array","_glBuffers","_updateID","static","id","update","destroy","i","length","from","Array"],"mappings":";;;;;;AAAA,IAAIA,MAAM,CAAV;AACA;;AAEA;;;;;;;IAMqBC,M;AAEjB;;;AAGA,kBAAYC,IAAZ,EACA;AAAA,QADkBC,OAClB,uEAD4B,IAC5B;;AAAA,QADkCC,KAClC,uEAD0C,KAC1C;;AAAA;;AACI;;;;;AAKA,SAAKF,IAAL,GAAYA,QAAQ,IAAIG,YAAJ,CAAiB,CAAjB,CAApB;;AAEA;;;;;;AAMA,SAAKC,UAAL,GAAkB,EAAlB;;AAEA,SAAKC,SAAL,GAAiB,CAAjB;;AAEA,SAAKH,KAAL,GAAaA,KAAb;;AAEA,SAAKI,MAAL,GAAcL,OAAd;;AAEA,SAAKM,EAAL,GAAUT,KAAV;AACH;;AAED;AACA;;;;;mBAGAU,M,mBAAOR,I,EACP;AACI,SAAKA,IAAL,GAAYA,QAAQ,KAAKA,IAAzB;AACA,SAAKK,SAAL;AACH,G;;AAED;;;;;mBAGAI,O,sBACA;AACI,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,KAAKN,UAAL,CAAgBO,MAApC,EAA4CD,GAA5C,EACA;AACI,WAAKN,UAAL,CAAgBM,CAAhB,EAAmBD,OAAnB;AACH;;AAED,SAAKT,IAAL,GAAY,IAAZ;AACH,G;;AAED;;;;;;;;;SAOOY,I,iBAAKZ,I,EACZ;AACI,QAAIA,gBAAgBa,KAApB,EACA;AACIb,aAAO,IAAIG,YAAJ,CAAiBH,IAAjB,CAAP;AACH;;AAED,WAAO,IAAID,MAAJ,CAAWC,IAAX,CAAP;AACH,G;;;;;kBArEgBD,M","file":"Buffer.js","sourcesContent":["let UID = 0;\n/* eslint-disable max-len */\n\n/**\n * A wrapper for data so that it can be used and uploaded by webGL\n *\n * @class\n * @memberof PIXI\n */\nexport default class Buffer\n{\n    /**\n     * @param {ArrayBuffer| SharedArrayBuffer|ArrayBufferView} data the data to store in the buffer.\n     */\n    constructor(data, _static = true, index = false)\n    {\n        /**\n         * The data in the buffer, as a typed array\n         *\n         * @type {ArrayBuffer| SharedArrayBuffer|ArrayBufferView} data  the array / typedArray\n         */\n        this.data = data || new Float32Array(1);\n\n        /**\n         * A map of renderer IDs to webgl buffer\n         *\n         * @private\n         * @member {object<number, GLBuffer>}\n         */\n        this._glBuffers = {};\n\n        this._updateID = 0;\n\n        this.index = index;\n\n        this.static = _static;\n\n        this.id = UID++;\n    }\n\n    // TODO could explore flagging only a partial upload?\n    /**\n     * flags this buffer as requiring an upload to the GPU\n     */\n    update(data)\n    {\n        this.data = data || this.data;\n        this._updateID++;\n    }\n\n    /**\n     * Destroys the buffer\n     */\n    destroy()\n    {\n        for (let i = 0; i < this._glBuffers.length; i++)\n        {\n            this._glBuffers[i].destroy();\n        }\n\n        this.data = null;\n    }\n\n    /**\n     * Helper function that creates a buffer based on an array or TypedArray\n     *\n     * @static\n     * @param {TypedArray| Array} data the TypedArray that the buffer will store. If this is a regular Array it will be converted to a Float32Array.\n     * @return {PIXI.mesh.Buffer} A new Buffer based on the data provided.\n     */\n    static from(data)\n    {\n        if (data instanceof Array)\n        {\n            data = new Float32Array(data);\n        }\n\n        return new Buffer(data);\n    }\n}\n\n"]}