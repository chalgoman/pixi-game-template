{"version":3,"sources":["../../../src/core/textures/FrameBuffer.js"],"names":["FrameBuffer","width","height","stencil","depth","dirtyId","dirtyFormat","dirtySize","depthTexture","colorTextures","glFrameBuffers","addColorTexture","index","texture","addDepthTexture","DEPTH_COMPONENT","UNSIGNED_SHORT","enableDepth","enableStencil","resize","i","length"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;IAEqBA,W;AAEjB,yBAAYC,KAAZ,EAAmBC,MAAnB,EACA;AAAA;;AACI,aAAKD,KAAL,GAAaA,SAAS,GAAtB;AACA,aAAKC,MAAL,GAAcA,UAAU,GAAxB;;AAEA,aAAKC,OAAL,GAAe,KAAf;AACA,aAAKC,KAAL,GAAa,KAAb;;AAEA,aAAKC,OAAL,GAAe,CAAf;AACA,aAAKC,WAAL,GAAmB,CAAnB;AACA,aAAKC,SAAL,GAAiB,CAAjB;;AAEA,aAAKC,YAAL,GAAoB,IAApB;AACA,aAAKC,aAAL,GAAqB,EAArB;;AAEA,aAAKC,cAAL,GAAsB,EAAtB;AACH;;0BAODC,e,4BAAgBC,K,EAAOC,O,EACvB;AACI;AACA,aAAKJ,aAAL,CAAmBG,SAAS,CAA5B,IAAiCC,WAAW,0BAAY,IAAZ,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,KAAKZ,KAA7B,EAAoC,KAAKC,MAAzC,CAA5C,CAFJ,CAEiG;;AAE7F,aAAKG,OAAL;AACA,aAAKC,WAAL;;AAEA,eAAO,IAAP;AACH,K;;0BAEDQ,e,4BAAgBD,O,EAChB;AACI;AACA,aAAKL,YAAL,GAAoBK,WAAW,0BAAY,IAAZ,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,KAAKZ,KAA7B,EAAoC,KAAKC,MAAzC,EAAiD,eAAQa,eAAzD,EAA0E,aAAMC,cAAhF,CAA/B,CAFJ,CAEmI;AAC/H;;AAEA,aAAKX,OAAL;AACA,aAAKC,WAAL;;AAEA,eAAO,IAAP;AACH,K;;0BAEDW,W,0BACA;AACI,aAAKb,KAAL,GAAa,IAAb;;AAEA,aAAKC,OAAL;AACA,aAAKC,WAAL;;AAEA,eAAO,IAAP;AACH,K;;0BAEDY,a,4BACA;AACI,aAAKf,OAAL,GAAe,IAAf;;AAEA,aAAKE,OAAL;AACA,aAAKC,WAAL;;AAEA,eAAO,IAAP;AACH,K;;0BAEDa,M,mBAAOlB,K,EAAOC,M,EACd;AACI,YAAID,UAAU,KAAKA,KAAf,IAAwBC,WAAW,KAAKA,MAA5C,EAAoD;;AAEpD,aAAKD,KAAL,GAAaA,KAAb;AACA,aAAKC,MAAL,GAAcA,MAAd;;AAEA,aAAKG,OAAL;AACA,aAAKE,SAAL;;AAEA,aAAK,IAAIa,IAAI,CAAb,EAAgBA,IAAI,KAAKX,aAAL,CAAmBY,MAAvC,EAA+CD,GAA/C,EACA;AACI,iBAAKX,aAAL,CAAmBW,CAAnB,EAAsBD,MAAtB,CAA6BlB,KAA7B,EAAoCC,MAApC;AACH;;AAED,YAAI,KAAKM,YAAT,EACA;AACI,iBAAKA,YAAL,CAAkBW,MAAlB,CAAyBlB,KAAzB,EAAgCC,MAAhC;AACH;AACJ,K;;;;4BAlED;AACI,mBAAO,KAAKO,aAAL,CAAmB,CAAnB,CAAP;AACH;;;;;;kBAvBgBT,W","file":"FrameBuffer.js","sourcesContent":["import Texture from './BaseTexture';\nimport { FORMATS, TYPES } from './../const';\n\nexport default class FrameBuffer\n{\n    constructor(width, height)\n    {\n        this.width = width || 100;\n        this.height = height || 100;\n\n        this.stencil = false;\n        this.depth = false;\n\n        this.dirtyId = 0;\n        this.dirtyFormat = 0;\n        this.dirtySize = 0;\n\n        this.depthTexture = null;\n        this.colorTextures = [];\n\n        this.glFrameBuffers = {};\n    }\n\n    get colorTexture()\n    {\n        return this.colorTextures[0];\n    }\n\n    addColorTexture(index, texture)\n    {\n        // TODO add some validation to the texture - same width / height etc?\n        this.colorTextures[index || 0] = texture || new Texture(null, 0, 1, this.width, this.height);// || new Texture();\n\n        this.dirtyId++;\n        this.dirtyFormat++;\n\n        return this;\n    }\n\n    addDepthTexture(texture)\n    {\n        /* eslint-disable max-len */\n        this.depthTexture = texture || new Texture(null, 0, 1, this.width, this.height, FORMATS.DEPTH_COMPONENT, TYPES.UNSIGNED_SHORT);// UNSIGNED_SHORT;\n        /* eslint-disable max-len */\n\n        this.dirtyId++;\n        this.dirtyFormat++;\n\n        return this;\n    }\n\n    enableDepth()\n    {\n        this.depth = true;\n\n        this.dirtyId++;\n        this.dirtyFormat++;\n\n        return this;\n    }\n\n    enableStencil()\n    {\n        this.stencil = true;\n\n        this.dirtyId++;\n        this.dirtyFormat++;\n\n        return this;\n    }\n\n    resize(width, height)\n    {\n        if (width === this.width && height === this.height) return;\n\n        this.width = width;\n        this.height = height;\n\n        this.dirtyId++;\n        this.dirtySize++;\n\n        for (let i = 0; i < this.colorTextures.length; i++)\n        {\n            this.colorTextures[i].resize(width, height);\n        }\n\n        if (this.depthTexture)\n        {\n            this.depthTexture.resize(width, height);\n        }\n    }\n\n}\n"]}