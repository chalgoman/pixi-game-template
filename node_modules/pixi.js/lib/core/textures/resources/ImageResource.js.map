{"version":3,"sources":["../../../../src/core/textures/resources/ImageResource.js"],"names":["ImageResource","source","url","src","load","Promise","resolve","onload","loaded","onerror","width","height","window","createImageBitmap","then","imageBitmap","complete","destroy","from","crossorigin","image","Image","undefined","indexOf","crossOrigin"],"mappings":";;;;AAAA;;;;AACA;;;;;;;;;;;;IAEqBA,a;;;AAEjB,2BAAYC,MAAZ,EACA;AAAA;;AAAA,qDACI,4BAAMA,MAAN,CADJ;;AAGI,cAAKC,GAAL,GAAWD,OAAOE,GAAlB;;AAEA,cAAKC,IAAL,GAAY,IAAIC,OAAJ,CAAY,UAACC,OAAD,EACxB;AACI,gBAAML,SAAS,MAAKA,MAApB;;AAEAA,mBAAOM,MAAP,GAAgB,YAChB;AACI,sBAAKC,MAAL,GAAc,IAAd;AACAP,uBAAOM,MAAP,GAAgB,IAAhB;AACAN,uBAAOQ,OAAP,GAAiB,IAAjB;AACA,sBAAKC,KAAL,GAAaT,OAAOS,KAApB;AACA,sBAAKC,MAAL,GAAcV,OAAOU,MAArB;;AAEA,oBAAIC,OAAOC,iBAAX,EACA;AACID,2BAAOC,iBAAP,CAAyBZ,MAAzB,EAAiCa,IAAjC,CAAsC,UAACC,WAAD,EACtC;AACI,8BAAKd,MAAL,GAAcc,WAAd;;AAEAT;AACH,qBALD;AAMH,iBARD,MAUA;AACIA;AACH;AACJ,aArBD;;AAuBA,gBAAIL,OAAOe,QAAP,IAAmBf,OAAOE,GAA9B,EACA;AACI,sBAAKK,MAAL,GAAc,IAAd;AACAP,uBAAOM,MAAP,GAAgB,IAAhB;AACAN,uBAAOQ,OAAP,GAAiB,IAAjB;AACA,sBAAKC,KAAL,GAAaT,OAAOS,KAApB;AACA,sBAAKC,MAAL,GAAcV,OAAOU,MAArB;;AAEA,oBAAIC,OAAOC,iBAAX,EACA;AACID,2BAAOC,iBAAP,CAAyBZ,MAAzB,EAAiCa,IAAjC,CAAsC,UAACC,WAAD,EACtC;AACI,8BAAKd,MAAL,GAAcc,WAAd;;AAEAT;AACH,qBALD;AAMH,iBARD,MAUA;AACIA;AACH;AACJ;;AAEL;AACE;AACE;AACH,SArDW,CAAZ;AALJ;AA2DC;;4BAEDW,O,sBACA;AACI,aAAKhB,MAAL,CAAYE,GAAZ,GAAkB,EAAlB;AACH,K;;kBAEMe,I,iBAAKhB,G,EAAKiB,W,EACjB;AACI,YAAMC,QAAQ,IAAIC,KAAJ,EAAd;;AAEA,YAAIF,gBAAgBG,SAAhB,IAA6BpB,IAAIqB,OAAJ,CAAY,OAAZ,MAAyB,CAA1D,EACA;AACIH,kBAAMI,WAAN,GAAoB,oCAAqBtB,GAArB,CAApB;AACH;;AAEDkB,cAAMjB,GAAN,GAAYD,GAAZ;;AAEA,eAAO,IAAIF,aAAJ,CAAkBoB,KAAlB,CAAP;AACH,K;;;;;kBAjFgBpB,a","file":"ImageResource.js","sourcesContent":["import determineCrossOrigin from '../../utils/determineCrossOrigin';\nimport TextureResource from './TextureResource';\n\nexport default class ImageResource extends TextureResource\n{\n    constructor(source)\n    {\n        super(source);\n\n        this.url = source.src;\n\n        this.load = new Promise((resolve) =>\n        {\n            const source = this.source;\n\n            source.onload = () =>\n            {\n                this.loaded = true;\n                source.onload = null;\n                source.onerror = null;\n                this.width = source.width;\n                this.height = source.height;\n\n                if (window.createImageBitmap)\n                {\n                    window.createImageBitmap(source).then((imageBitmap) =>\n                    {\n                        this.source = imageBitmap;\n\n                        resolve(this);\n                    });\n                }\n                else\n                {\n                    resolve(this);\n                }\n            };\n\n            if (source.complete && source.src)\n            {\n                this.loaded = true;\n                source.onload = null;\n                source.onerror = null;\n                this.width = source.width;\n                this.height = source.height;\n\n                if (window.createImageBitmap)\n                {\n                    window.createImageBitmap(source).then((imageBitmap) =>\n                    {\n                        this.source = imageBitmap;\n\n                        resolve(this);\n                    });\n                }\n                else\n                {\n                    resolve(this);\n                }\n            }\n\n        //    source.onerror = () => {\n          //      reject('unable to load \"' + source.src + '\" resource cannot be found')\n            // }\n        });\n    }\n\n    destroy()\n    {\n        this.source.src = '';\n    }\n\n    static from(url, crossorigin)\n    {\n        const image = new Image();\n\n        if (crossorigin === undefined && url.indexOf('data:') !== 0)\n        {\n            image.crossOrigin = determineCrossOrigin(url);\n        }\n\n        image.src = url;\n\n        return new ImageResource(image);\n    }\n\n}\n"]}