{"version":3,"sources":["../../../../src/core/textures/resources/VideoResource.js"],"names":["ticker","VideoResource","source","_autoUpdate","_isAutoUpdating","autoPlay","update","bind","_onCanPlay","readyState","HAVE_ENOUGH_DATA","HAVE_FUTURE_DATA","width","height","complete","addEventListener","_onPlayStart","_onPlayStop","_isSourceReady","load","Promise","resolve","loaded","resourceUpdated","emit","_isSourcePlaying","currentTime","paused","ended","autoUpdate","shared","add","remove","removeEventListener","videoWidth","videoHeight","play","destroy","fromUrl","videoSrc","scaleMode","video","document","createElement","setAttribute","Array","isArray","i","length","appendChild","createSource","src","mime","value","path","type","substr","lastIndexOf"],"mappings":"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","file":"VideoResource.js","sourcesContent":["import TextureResource from './TextureResource';\nimport * as ticker from '../../ticker';\n\nexport default class VideoResource extends TextureResource\n{\n    constructor(source)\n    {\n        super(source);\n\n        this._autoUpdate = true;\n        this._isAutoUpdating = false;\n\n        /**\n         * When set to true will automatically play videos used by this texture once\n         * they are loaded. If false, it will not modify the playing state.\n         *\n         * @member {boolean}\n         * @default true\n         */\n        this.autoPlay = true;\n\n        this.update = this.update.bind(this);\n        this._onCanPlay = this._onCanPlay.bind(this);\n\n        if ((source.readyState === source.HAVE_ENOUGH_DATA || source.readyState === source.HAVE_FUTURE_DATA)\n        && source.width && source.height)\n        {\n            source.complete = true;\n        }\n\n        source.addEventListener('play', this._onPlayStart.bind(this));\n        source.addEventListener('pause', this._onPlayStop.bind(this));\n\n        if (!this._isSourceReady())\n        {\n            source.addEventListener('canplay', this._onCanPlay);\n            source.addEventListener('canplaythrough', this._onCanPlay);\n        }\n        else\n        {\n            this._onCanPlay();\n        }\n\n        this.load = new Promise((resolve) =>\n        {\n            this.resolve = resolve;\n\n            if (this.loaded)\n            {\n                this.resolve(this);\n            }\n        });\n    }\n\n    update()\n    {\n        // TODO - slow down and base on the videos framerate\n        this.resourceUpdated.emit();\n    }\n\n    /**\n     * Returns true if the underlying source is playing.\n     *\n     * @private\n     * @return {boolean} True if playing.\n     */\n    _isSourcePlaying()\n    {\n        const source = this.source;\n\n        return (source.currentTime > 0 && source.paused === false && source.ended === false && source.readyState > 2);\n    }\n\n    /**\n     * Returns true if the underlying source is ready for playing.\n     *\n     * @private\n     * @return {boolean} True if ready.\n     */\n    _isSourceReady()\n    {\n        return this.source.readyState === 3 || this.source.readyState === 4;\n    }\n\n    /**\n     * Runs the update loop when the video is ready to play\n     *\n     * @private\n     */\n    _onPlayStart()\n    {\n        // Just in case the video has not received its can play even yet..\n        if (!this.loaded)\n        {\n            this._onCanPlay();\n        }\n\n        if (!this._isAutoUpdating && this.autoUpdate)\n        {\n            ticker.shared.add(this.update, this);\n            this._isAutoUpdating = true;\n        }\n    }\n\n    /**\n     * Fired when a pause event is triggered, stops the update loop\n     *\n     * @private\n     */\n    _onPlayStop()\n    {\n        if (this._isAutoUpdating)\n        {\n            ticker.shared.remove(this.update, this);\n            this._isAutoUpdating = false;\n        }\n    }\n\n    /**\n     * Fired when the video is loaded and ready to play\n     *\n     * @private\n     */\n    _onCanPlay()\n    {\n        if (this.source)\n        {\n            this.source.removeEventListener('canplay', this._onCanPlay);\n            this.source.removeEventListener('canplaythrough', this._onCanPlay);\n\n            this.width = this.source.videoWidth;\n            this.height = this.source.videoHeight;\n\n            // prevent multiple loaded dispatches..\n            if (!this.loaded)\n            {\n                this.loaded = true;\n                if (this.resolve)\n                {\n                    this.resolve(this);\n                }\n            }\n\n            if (this._isSourcePlaying())\n            {\n                this._onPlayStart();\n            }\n            else if (this.autoPlay)\n            {\n                this.source.play();\n            }\n        }\n    }\n\n    /**\n     * Destroys this texture\n     *\n     */\n    destroy()\n    {\n        if (this._isAutoUpdating)\n        {\n            ticker.shared.remove(this.update, this);\n        }\n/*\n        if (this.source && this.source._pixiId)\n        {\n            delete BaseTextureCache[this.source._pixiId];\n            delete this.source._pixiId;\n        }\n*/\n  //      super.destroy();\n    }\n\n    /**\n     * Should the base texture automatically update itself, set to true by default\n     *\n     * @member {boolean}\n     */\n    get autoUpdate()\n    {\n        return this._autoUpdate;\n    }\n\n    set autoUpdate(value) // eslint-disable-line require-jsdoc\n    {\n        if (value !== this._autoUpdate)\n        {\n            this._autoUpdate = value;\n\n            if (!this._autoUpdate && this._isAutoUpdating)\n            {\n                ticker.shared.remove(this.update, this);\n                this._isAutoUpdating = false;\n            }\n            else if (this._autoUpdate && !this._isAutoUpdating)\n            {\n                ticker.shared.add(this.update, this);\n                this._isAutoUpdating = true;\n            }\n        }\n    }\n\n    /**\n     * Helper function that creates a new BaseTexture based on the given video element.\n     * This BaseTexture can then be used to create a texture\n     *\n     * @static\n     * @param {string|object|string[]|object[]} videoSrc - The URL(s) for the video.\n     * @param {string} [videoSrc.src] - One of the source urls for the video\n     * @param {string} [videoSrc.mime] - The mimetype of the video (e.g. 'video/mp4'). If not specified\n     *  the url's extension will be used as the second part of the mime type.\n     * @param {number} scaleMode - See {@link PIXI.SCALE_MODES} for possible values\n     * @return {PIXI.VideoBaseTexture} Newly created VideoBaseTexture\n     */\n    static fromUrl(videoSrc, scaleMode)\n    {\n        const video = document.createElement('video');\n\n        video.setAttribute('webkit-playsinline', '');\n        video.setAttribute('playsinline', '');\n\n        // array of objects or strings\n        if (Array.isArray(videoSrc))\n        {\n            for (let i = 0; i < videoSrc.length; ++i)\n            {\n                video.appendChild(createSource(videoSrc[i].src || videoSrc[i], videoSrc[i].mime));\n            }\n        }\n        // single object or string\n        else\n        {\n            video.appendChild(createSource(videoSrc.src || videoSrc, videoSrc.mime));\n        }\n\n        video.load();\n\n        return new VideoResource(video, scaleMode);\n    }\n\n}\n\nfunction createSource(path, type)\n{\n    if (!type)\n    {\n        type = `video/${path.substr(path.lastIndexOf('.') + 1)}`;\n    }\n\n    const source = document.createElement('source');\n\n    source.src = path;\n    source.type = type;\n\n    return source;\n}\n"]}