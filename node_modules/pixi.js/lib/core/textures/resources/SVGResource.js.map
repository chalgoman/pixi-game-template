{"version":3,"sources":["../../../../src/core/textures/resources/SVGResource.js"],"names":["SVGResource","svgSource","scale","uploadable","resolve","load","Promise","_loadSvgSourceUsingXhr","_loadSvgSource","dataUri","_loadSvgSourceUsingDataUri","svgXhr","XMLHttpRequest","onload","readyState","DONE","status","Error","_loadSvgSourceUsingString","response","onerror","emit","open","send","svgString","svgSize","tempImage","Image","src","svgWidth","width","svgHeight","height","Math","round","canvas","document","createElement","_pixiId","getContext","drawImage","source","from","url"],"mappings":";;;;AAAA;;AAGA;;;;;;;;;;;;IAEqBA,W;;;AAEjB,yBAAYC,SAAZ,EAAuBC,KAAvB,EACA;AAAA;;AAAA,qDACI,2BADJ;;AAGI,cAAKD,SAAL,GAAiBA,SAAjB;AACA,cAAKC,KAAL,GAAa,KAAKA,KAAlB;AACA,cAAKC,UAAL,GAAkB,IAAlB;;AAEA,cAAKC,OAAL,GAAe,IAAf;;AAEA,cAAKC,IAAL,GAAY,IAAIC,OAAJ,CAAY,UAACF,OAAD,EAChC;AACY,kBAAKA,OAAL,GAAeA,OAAf;AACA,kBAAKG,sBAAL;AACH,SAJW,CAAZ;AATJ;AAcC;;AAED;;;;;;0BAIAC,c,6BACA;AACI,YAAMC,UAAU,6BAAiB,KAAKR,SAAtB,CAAhB;;AAEA,YAAIQ,OAAJ,EACA;AACI,iBAAKC,0BAAL,CAAgCD,OAAhC;AACH,SAHD,MAKA;AACI;AACA,iBAAKF,sBAAL;AACH;AACJ,K;;AAED;;;;;0BAGAA,sB,qCACA;AAAA;;AACI,YAAMI,SAAS,IAAIC,cAAJ,EAAf;;AAEA;AACA;;AAEA;AACA;AACA;;AAEAD,eAAOE,MAAP,GAAgB,YAChB;AACI,gBAAIF,OAAOG,UAAP,KAAsBH,OAAOI,IAA7B,IAAqCJ,OAAOK,MAAP,KAAkB,GAA3D,EACA;AACI,sBAAM,IAAIC,KAAJ,CAAU,+BAAV,CAAN;AACH;;AAED,mBAAKC,yBAAL,CAA+BP,OAAOQ,QAAtC;AACH,SARD;;AAUAR,eAAOS,OAAP,GAAiB;AAAA,mBAAM,OAAKC,IAAL,CAAU,OAAV,SAAN;AAAA,SAAjB;;AAEAV,eAAOW,IAAP,CAAY,KAAZ,EAAmB,KAAKrB,SAAxB,EAAmC,IAAnC;AACAU,eAAOY,IAAP;AACH,K;;AAED;;;;;;;;;;;0BASAL,yB,sCAA0BM,S,EAC1B;AACI,YAAMC,UAAU,uBAAWD,SAAX,CAAhB;;AAEA;AACA;AACA;AACA,YAAME,YAAa,IAAIC,KAAJ,EAAnB;;AAEAD,kBAAUE,GAAV,2BAAsCJ,SAAtC;;AAEA,YAAMK,WAAWJ,QAAQK,KAAzB;AACA,YAAMC,YAAYN,QAAQO,MAA1B;;AAEA,YAAI,CAACH,QAAD,IAAa,CAACE,SAAlB,EACA;AACI,kBAAM,IAAId,KAAJ,CAAU,sFAAV,CAAN;AACH;;AAED;AACA,aAAKa,KAAL,GAAaG,KAAKC,KAAL,CAAWL,WAAW,KAAK3B,KAA3B,CAAb;AACA,aAAK8B,MAAL,GAAcC,KAAKC,KAAL,CAAWH,YAAY,KAAK7B,KAA5B,CAAd;;AAEA;AACA,YAAMiC,SAASC,SAASC,aAAT,CAAuB,QAAvB,CAAf;;AAEAF,eAAOL,KAAP,GAAe,KAAKA,KAApB;AACAK,eAAOH,MAAP,GAAgB,KAAKA,MAArB;AACAG,eAAOG,OAAP,eAA2B,iBAA3B;;AAEA;AACAH,eACKI,UADL,CACgB,IADhB,EAEKC,SAFL,CAEed,SAFf,EAE0B,CAF1B,EAE6B,CAF7B,EAEgCG,QAFhC,EAE0CE,SAF1C,EAEqD,CAFrD,EAEwD,CAFxD,EAE2D,KAAKD,KAFhE,EAEuE,KAAKE,MAF5E;;AAIA,aAAKS,MAAL,GAAcN,MAAd;;AAEA,aAAK/B,OAAL,CAAa,IAAb;AACH,K;;gBAEMsC,I,iBAAKC,G,EACZ;AACI,eAAO,IAAI3C,WAAJ,CAAgB2C,GAAhB,CAAP;AACH,K;;;;;kBAxHgB3C,W","file":"SVGResource.js","sourcesContent":["import {\n    decomposeDataUri, getSvgSize, uid,\n} from '../../utils';\nimport TextureResource from './TextureResource';\n\nexport default class SVGResource extends TextureResource\n{\n    constructor(svgSource, scale)\n    {\n        super();\n\n        this.svgSource = svgSource;\n        this.scale = 1 || scale;\n        this.uploadable = true;\n\n        this.resolve = null;\n\n        this.load = new Promise((resolve) =>\n{\n            this.resolve = resolve;\n            this._loadSvgSourceUsingXhr();\n        });\n    }\n\n    /**\n     * Checks if `source` is an SVG image and whether it's loaded via a URL or a data URI. Then calls\n     * `_loadSvgSourceUsingDataUri` or `_loadSvgSourceUsingXhr`.\n     */\n    _loadSvgSource()\n    {\n        const dataUri = decomposeDataUri(this.svgSource);\n\n        if (dataUri)\n        {\n            this._loadSvgSourceUsingDataUri(dataUri);\n        }\n        else\n        {\n            // We got an URL, so we need to do an XHR to check the svg size\n            this._loadSvgSourceUsingXhr();\n        }\n    }\n\n    /**\n     * Loads an SVG string from `imageUrl` using XHR and then calls `_loadSvgSourceUsingString`.\n     */\n    _loadSvgSourceUsingXhr()\n    {\n        const svgXhr = new XMLHttpRequest();\n\n        // This throws error on IE, so SVG Document can't be used\n        // svgXhr.responseType = 'document';\n\n        // This is not needed since we load the svg as string (breaks IE too)\n        // but overrideMimeType() can be used to force the response to be parsed as XML\n        // svgXhr.overrideMimeType('image/svg+xml');\n\n        svgXhr.onload = () =>\n        {\n            if (svgXhr.readyState !== svgXhr.DONE || svgXhr.status !== 200)\n            {\n                throw new Error('Failed to load SVG using XHR.');\n            }\n\n            this._loadSvgSourceUsingString(svgXhr.response);\n        };\n\n        svgXhr.onerror = () => this.emit('error', this);\n\n        svgXhr.open('GET', this.svgSource, true);\n        svgXhr.send();\n    }\n\n    /**\n     * Loads texture using an SVG string. The original SVG Image is stored as `origSource` and the\n     * created canvas is the new `source`. The SVG is scaled using `sourceScale`. Called by\n     * `_loadSvgSourceUsingXhr` or `_loadSvgSourceUsingDataUri`.\n     *\n     * @param  {string} svgString SVG source as string\n     *\n     * @fires loaded\n     */\n    _loadSvgSourceUsingString(svgString)\n    {\n        const svgSize = getSvgSize(svgString);\n\n        // TODO do we need to wait for this to load?\n        // seems instant!\n        //\n        const tempImage =  new Image();\n\n        tempImage.src = `data:image/svg+xml,${svgString}`;\n\n        const svgWidth = svgSize.width;\n        const svgHeight = svgSize.height;\n\n        if (!svgWidth || !svgHeight)\n        {\n            throw new Error('The SVG image must have width and height defined (in pixels), canvas API needs them.');\n        }\n\n        // Scale realWidth and realHeight\n        this.width = Math.round(svgWidth * this.scale);\n        this.height = Math.round(svgHeight * this.scale);\n\n        // Create a canvas element\n        const canvas = document.createElement('canvas');\n\n        canvas.width = this.width;\n        canvas.height = this.height;\n        canvas._pixiId = `canvas_${uid()}`;\n\n        // Draw the Svg to the canvas\n        canvas\n            .getContext('2d')\n            .drawImage(tempImage, 0, 0, svgWidth, svgHeight, 0, 0, this.width, this.height);\n\n        this.source = canvas;\n\n        this.resolve(this);\n    }\n\n    static from(url)\n    {\n        return new SVGResource(url);\n    }\n\n}\n"]}