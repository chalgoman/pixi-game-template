{"version":3,"sources":["../../../src/core/textures/Texture.js"],"names":["Texture","baseTexture","frame","orig","trim","rotate","noFrame","_frame","valid","requiresUpdate","_uvs","_rotate","Number","Error","width","height","on","onBaseTextureUpdated","once","_updateID","transform","textureCacheIds","update","emit","destroy","destroyBase","imageUrl","removeFromCache","off","clone","_updateUvs","set","from","source","scaleMode","cacheId","_pixiId","texture","addToCache","fromLoader","name","resource","url","SCALE_MODE","id","indexOf","push","console","warn","textureFromCache","index","splice","i","length","x","y","fromImage","fromSVG","fromCanvas","fromVideo","fromFrame","createWhiteTexture","canvas","document","createElement","context","getContext","fillStyle","fillRect","removeAllHandlers","tex","_emptyDestroy","_emptyOn","_emptyOnce","_emptyEmit","EMPTY","WHITE"],"mappings":"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","file":"Texture.js","sourcesContent":["import BaseTexture from './BaseTexture';\nimport ImageResource from './resources/ImageResource';\nimport CanvasResource from './resources/CanvasResource';\nimport TextureUvs from './TextureUvs';\nimport EventEmitter from 'eventemitter3';\nimport settings from '../settings';\nimport { Rectangle } from '../math';\nimport { uid, TextureCache, getResolutionOfUrl } from '../utils';\n\n/**\n * A texture stores the information that represents an image or part of an image. It cannot be added\n * to the display list directly. Instead use it as the texture for a Sprite. If no frame is provided\n * then the whole image is used.\n *\n * You can directly create a texture from an image and then reuse it multiple times like this :\n *\n * ```js\n * let texture = PIXI.Texture.fromImage('assets/image.png');\n * let sprite1 = new PIXI.Sprite(texture);\n * let sprite2 = new PIXI.Sprite(texture);\n * ```\n *\n * Textures made from SVGs, loaded or not, cannot be used before the file finishes processing.\n * You can check for this by checking the sprite's _textureID property.\n * ```js\n * var texture = PIXI.Texture.fromImage('assets/image.svg');\n * var sprite1 = new PIXI.Sprite(texture);\n * //sprite1._textureID should not be undefined if the texture has finished processing the SVG file\n * ```\n * You can use a ticker or rAF to ensure your sprites load the finished textures after processing. See issue #3068.\n *\n * @class\n * @extends EventEmitter\n * @memberof PIXI\n */\nexport default class Texture extends EventEmitter\n{\n    /**\n     * @param {PIXI.BaseTexture} baseTexture - The base texture source to create the texture from\n     * @param {PIXI.Rectangle} [frame] - The rectangle frame of the texture to show\n     * @param {PIXI.Rectangle} [orig] - The area of original texture\n     * @param {PIXI.Rectangle} [trim] - Trimmed rectangle of original texture\n     * @param {number} [rotate] - indicates how the texture was rotated by texture packer. See {@link PIXI.GroupD8}\n     */\n    constructor(baseTexture, frame, orig, trim, rotate)\n    {\n        super();\n\n        /**\n         * Does this Texture have any frame data assigned to it?\n         *\n         * @member {boolean}\n         */\n        this.noFrame = false;\n\n        if (!frame)\n        {\n            this.noFrame = true;\n            frame = new Rectangle(0, 0, 1, 1);\n        }\n\n        if (baseTexture instanceof Texture)\n        {\n            baseTexture = baseTexture.baseTexture;\n        }\n\n        /**\n         * The base texture that this texture uses.\n         *\n         * @member {PIXI.BaseTexture}\n         */\n        this.baseTexture = baseTexture;\n\n        /**\n         * This is the area of the BaseTexture image to actually copy to the Canvas / WebGL when rendering,\n         * irrespective of the actual frame size or placement (which can be influenced by trimmed texture atlases)\n         *\n         * @member {PIXI.Rectangle}\n         */\n        this._frame = frame;\n\n        /**\n         * This is the trimmed area of original texture, before it was put in atlas\n         *\n         * @member {PIXI.Rectangle}\n         */\n        this.trim = trim;\n\n        /**\n         * This will let the renderer know if the texture is valid. If it's not then it cannot be rendered.\n         *\n         * @member {boolean}\n         */\n        this.valid = false;\n\n        /**\n         * This will let a renderer know that a texture has been updated (used mainly for webGL uv updates)\n         *\n         * @member {boolean}\n         */\n        this.requiresUpdate = false;\n\n        /**\n         * The WebGL UV data cache.\n         *\n         * @member {PIXI.TextureUvs}\n         * @private\n         */\n        this._uvs = null;\n\n        /**\n         * This is the area of original texture, before it was put in atlas\n         *\n         * @member {PIXI.Rectangle}\n         */\n        this.orig = orig || frame;// new Rectangle(0, 0, 1, 1);\n\n        this._rotate = Number(rotate || 0);\n\n        if (rotate === true)\n        {\n            // this is old texturepacker legacy, some games/libraries are passing \"true\" for rotated textures\n            this._rotate = 2;\n        }\n        else if (this._rotate % 2 !== 0)\n        {\n            throw new Error('attempt to use diamond-shaped UVs. If you are sure, set rotation manually');\n        }\n\n        if (baseTexture.valid)\n        {\n            if (this.noFrame)\n            {\n                frame = new Rectangle(0, 0, baseTexture.width, baseTexture.height);\n\n                // if there is no frame we should monitor for any base texture changes..\n                baseTexture.on('update', this.onBaseTextureUpdated, this);\n            }\n            this.frame = frame;\n        }\n        else\n        {\n            baseTexture.once('loaded', this.onBaseTextureUpdated, this);\n        }\n\n        /**\n         * Fired when the texture is updated. This happens if the frame or the baseTexture is updated.\n         *\n         * @event PIXI.Texture#update\n         * @protected\n         * @param {PIXI.Texture} texture - Instance of texture being updated.\n         */\n\n        this._updateID = 0;\n\n        /**\n         * Extra field for extra plugins. May contain clamp settings and some matrices\n         * @type {Object}\n         */\n        this.transform = null;\n\n        /**\n         * The ids under which this Texture has been added to the texture cache. This is\n         * automatically set as long as Texture.addToCache is used, but may not be set if a\n         * Texture is added directly to the TextureCache array.\n         *\n         * @member {string[]}\n         */\n        this.textureCacheIds = [];\n    }\n\n    /**\n     * Updates this texture on the gpu.\n     *\n     */\n    update()\n    {\n        this.baseTexture.update();\n    }\n\n    /**\n     * Called when the base texture is updated\n     *\n     * @private\n     * @param {PIXI.BaseTexture} baseTexture - The base texture.\n     */\n    onBaseTextureUpdated(baseTexture)\n    {\n        this._updateID++;\n\n        // TODO this code looks confusing.. boo to abusing getters and setters!\n        if (this.noFrame)\n        {\n            this.frame = new Rectangle(0, 0, baseTexture.width, baseTexture.height);\n        }\n        else\n        {\n            this.frame = this._frame;\n            // TODO maybe watch out for the no frame option\n            // updating the texture will should update the frame if it was set to no frame..\n        }\n\n        this.emit('update', this);\n    }\n\n    /**\n     * Destroys this texture\n     *\n     * @param {boolean} [destroyBase=false] Whether to destroy the base texture as well\n     */\n    destroy(destroyBase)\n    {\n        if (this.baseTexture)\n        {\n            if (destroyBase)\n            {\n                // delete the texture if it exists in the texture cache..\n                // this only needs to be removed if the base texture is actually destroyed too..\n                if (TextureCache[this.baseTexture.imageUrl])\n                {\n                    Texture.removeFromCache(this.baseTexture.imageUrl);\n                }\n\n                this.baseTexture.destroy();\n            }\n\n            this.baseTexture.off('update', this.onBaseTextureUpdated, this);\n\n            this.baseTexture = null;\n        }\n\n        this._frame = null;\n        this._uvs = null;\n        this.trim = null;\n        this.orig = null;\n\n        this.valid = false;\n\n        Texture.removeFromCache(this);\n        this.textureCacheIds = null;\n    }\n\n    /**\n     * Creates a new texture object that acts the same as this one.\n     *\n     * @return {PIXI.Texture} The new texture\n     */\n    clone()\n    {\n        return new Texture(this.baseTexture, this.frame, this.orig, this.trim, this.rotate);\n    }\n\n    /**\n     * Updates the internal WebGL UV cache.\n     *\n     * @protected\n     */\n    _updateUvs()\n    {\n        if (!this._uvs)\n        {\n            this._uvs = new TextureUvs();\n        }\n\n        this._uvs.set(this._frame, this.baseTexture, this.rotate);\n\n        this._updateID++;\n    }\n\n    /**\n     * Helper function that creates a new Texture based on the source you provide.\n     * The source can be - frame id, image url, video url, canvas element, video element, base texture\n     *\n     * @static\n     * @param {number|string|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|PIXI.BaseTexture}\n     *        source - Source to create texture from\n     * @return {PIXI.Texture} The newly created texture\n     */\n    static from(source, scaleMode)\n    {\n        let cacheId = null;\n\n        if (typeof source === 'string')\n        {\n            cacheId = source;\n        }\n        else\n        {\n            if (!source._pixiId)\n            {\n                source._pixiId = `pixiid_${uid()}`;\n            }\n\n            cacheId = source._pixiId;\n        }\n\n        let texture = TextureCache[cacheId];\n\n        if (!texture)\n        {\n            texture = new Texture(new BaseTexture(source, scaleMode));\n            texture.baseTexture.cacheId = cacheId;\n\n            BaseTexture.addToCache(texture.baseTexture, cacheId);\n            Texture.addToCache(texture, cacheId);\n        }\n\n        // lets assume its a base texture!\n        return texture;\n    }\n\n    /**\n     * Create a texture from a source and add to the cache.\n     *\n     * @static\n     * @param {HTMLImageElement|HTMLCanvasElement} source - The input source.\n     * @param {String} imageUrl - File name of texture, for cache and resolving resolution.\n     * @param {String} [name] - Human readible name for the texture cache. If no name is\n     *        specified, only `imageUrl` will be used as the cache ID.\n     * @return {PIXI.Texture} Output texture\n     */\n    static fromLoader(source, imageUrl, name)\n    {\n        // console.log('added from loader...')\n        const resource = new ImageResource(source);// .from(imageUrl, crossorigin);// document.createElement('img');\n\n        resource.url = imageUrl;\n\n        //  console.log('base resource ' + resource.width);\n        const baseTexture = new BaseTexture(resource,\n                                            settings.SCALE_MODE,\n                                            getResolutionOfUrl(imageUrl));\n\n        const texture = new Texture(baseTexture);\n\n        // No name, use imageUrl instead\n        if (!name)\n        {\n            name = imageUrl;\n        }\n\n        // lets also add the frame to pixi's global cache for fromFrame and fromImage fucntions\n        BaseTexture.addToCache(texture.baseTexture, name);\n        Texture.addToCache(texture, name);\n\n        // also add references by url if they are different.\n        if (name !== imageUrl)\n        {\n            BaseTexture.addToCache(texture.baseTexture, imageUrl);\n            Texture.addToCache(texture, imageUrl);\n        }\n\n        return texture;\n    }\n\n    /**\n     * Adds a Texture to the global TextureCache. This cache is shared across the whole PIXI object.\n     *\n     * @static\n     * @param {PIXI.Texture} texture - The Texture to add to the cache.\n     * @param {string} id - The id that the Texture will be stored against.\n     */\n    static addToCache(texture, id)\n    {\n        if (id)\n        {\n            if (texture.textureCacheIds.indexOf(id) === -1)\n            {\n                texture.textureCacheIds.push(id);\n            }\n\n            // @if DEBUG\n            /* eslint-disable no-console */\n            if (TextureCache[id])\n            {\n                console.warn(`Texture added to the cache with an id [${id}] that already had an entry`);\n            }\n            /* eslint-enable no-console */\n            // @endif\n\n            TextureCache[id] = texture;\n        }\n    }\n\n    /**\n     * Remove a Texture from the global TextureCache.\n     *\n     * @static\n     * @param {string|PIXI.Texture} texture - id of a Texture to be removed, or a Texture instance itself\n     * @return {PIXI.Texture|null} The Texture that was removed\n     */\n    static removeFromCache(texture)\n    {\n        if (typeof texture === 'string')\n        {\n            const textureFromCache = TextureCache[texture];\n\n            if (textureFromCache)\n            {\n                const index = textureFromCache.textureCacheIds.indexOf(texture);\n\n                if (index > -1)\n                {\n                    textureFromCache.textureCacheIds.splice(index, 1);\n                }\n\n                delete TextureCache[texture];\n\n                return textureFromCache;\n            }\n        }\n        else\n        {\n            for (let i = 0; i < texture.textureCacheIds.length; ++i)\n            {\n                delete TextureCache[texture.textureCacheIds[i]];\n            }\n\n            texture.textureCacheIds.length = 0;\n\n            return texture;\n        }\n\n        return null;\n    }\n\n    /**\n     * The frame specifies the region of the base texture that this texture uses.\n     *\n     * @member {PIXI.Rectangle}\n     */\n    get frame()\n    {\n        return this._frame;\n    }\n\n    set frame(frame) // eslint-disable-line require-jsdoc\n    {\n        this._frame = frame;\n\n        this.noFrame = false;\n\n        if (frame.x + frame.width > this.baseTexture.width || frame.y + frame.height > this.baseTexture.height)\n        {\n            throw new Error('Texture Error: frame does not fit inside the base Texture dimensions: '\n                + `X: ${frame.x} + ${frame.width} > ${this.baseTexture.width} `\n                + `Y: ${frame.y} + ${frame.height} > ${this.baseTexture.height}`);\n        }\n\n        // this.valid = frame && frame.width && frame.height && this.baseTexture.source && this.baseTexture.hasLoaded;\n        this.valid = frame && frame.width && frame.height && this.baseTexture.valid;\n\n        if (!this.trim && !this.rotate)\n        {\n            this.orig = frame;\n        }\n\n        if (this.valid)\n        {\n            this._updateUvs();\n        }\n    }\n\n    /**\n     * Indicates whether the texture is rotated inside the atlas\n     * set to 2 to compensate for texture packer rotation\n     * set to 6 to compensate for spine packer rotation\n     * can be used to rotate or mirror sprites\n     * See {@link PIXI.GroupD8} for explanation\n     *\n     * @member {number}\n     */\n    get rotate()\n    {\n        return this._rotate;\n    }\n\n    set rotate(rotate) // eslint-disable-line require-jsdoc\n    {\n        this._rotate = rotate;\n        if (this.valid)\n        {\n            this._updateUvs();\n        }\n    }\n\n    /**\n     * The width of the Texture in pixels.\n     *\n     * @member {number}\n     */\n    get width()\n    {\n        return this.orig.width;\n    }\n\n    /**\n     * The height of the Texture in pixels.\n     *\n     * @member {number}\n     */\n    get height()\n    {\n        return this.orig.height;\n    }\n}\n\nTexture.fromImage = Texture.from;\nTexture.fromSVG = Texture.from;\nTexture.fromCanvas = Texture.from;\nTexture.fromVideo = Texture.from;\nTexture.fromFrame = Texture.from;\n\nfunction createWhiteTexture()\n{\n    const canvas = document.createElement('canvas');\n\n    canvas.width = 10;\n    canvas.height = 10;\n\n    const context = canvas.getContext('2d');\n\n    context.fillStyle = 'white';\n    context.fillRect(0, 0, 10, 10);\n\n    return new Texture(new BaseTexture(new CanvasResource(canvas)));\n}\n\nfunction removeAllHandlers(tex)\n{\n    tex.destroy = function _emptyDestroy() { /* empty */ };\n    tex.on = function _emptyOn() { /* empty */ };\n    tex.once = function _emptyOnce() { /* empty */ };\n    tex.emit = function _emptyEmit() { /* empty */ };\n}\n\n/**\n * An empty texture, used often to not have to create multiple empty textures.\n * Can not be destroyed.\n *\n * @static\n * @constant\n */\nTexture.EMPTY = new Texture(new BaseTexture());\nremoveAllHandlers(Texture.EMPTY);\nremoveAllHandlers(Texture.EMPTY.baseTexture);\n\n/**\n * A white texture of 10x10 size, used for graphics and other things\n * Can not be destroyed.\n *\n * @static\n * @constant\n */\nTexture.WHITE = createWhiteTexture();\nremoveAllHandlers(Texture.WHITE);\nremoveAllHandlers(Texture.WHITE.baseTexture);\n"]}