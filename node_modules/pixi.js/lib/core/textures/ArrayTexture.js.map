{"version":3,"sources":["../../../src/core/textures/ArrayTexture.js"],"names":["ArrayTexture","width","height","size","format","target","TEXTURE_2D_ARRAY","_new","array","setResource","resource","index","layer","texture","texturePart","dirtyId","load","then","validate","valid","i","length","loaded","from","arrayTexture"],"mappings":";;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;IAEqBA,Y;;;AAEjB,0BAAYC,KAAZ,EAAmBC,MAAnB,EAA2BC,IAA3B,EAAiCC,MAAjC,EACA;AAAA;;AAAA,qDACI,oBAAM,IAAN,EAAY,CAAZ,EAAe,CAAf,EAAkBH,KAAlB,EAAyBC,MAAzB,EAAiCE,MAAjC,CADJ;;AAGI,cAAKC,MAAL,GAAc,eAAQC,gBAAtB;AACA,cAAKH,IAAL,GAAYA,IAAZ;AACA,cAAKI,IAAL,GAAY,IAAZ;AACA,cAAKC,KAAL,GAAa,EAAb;AANJ;AAOC;;2BAEDC,W,wBAAYC,Q,EAAUC,K,EACtB;AAAA;;AACI,YAAIC,QAAQ,KAAKJ,KAAL,CAAWG,KAAX,CAAZ;;AAEA,YAAI,CAACC,KAAL,EACA;AACIA,oBAAQ,KAAKJ,KAAL,CAAWG,KAAX,IAAoB,EAAEA,YAAF,EAASE,SAAS,IAAlB,EAAwBH,UAAU,IAAlC,EAAwCI,aAAa,IAArD,EAA2DC,SAAS,CAApE,EAA5B;AACH;;AAEDH,cAAMF,QAAN,GAAiBA,QAAjB;;AAEAA,iBAASM,IAAT,CAAcC,IAAd,CAAmB,UAACP,QAAD,EAC3B;AACY,gBAAIE,MAAMF,QAAN,KAAmBA,QAAvB,EACA;AACI,uBAAKQ,QAAL;AACA,uBAAKH,OAAL;AACH;AACJ,SAPD;AAQH,K;;2BAEDG,Q,uBACA;AACI,YAAIC,QAAQ,IAAZ;;AAEA,YAAI,KAAKlB,KAAL,KAAe,CAAC,CAAhB,IAAqB,KAAKC,MAAL,KAAgB,CAAC,CAA1C,EACA;AACIiB,oBAAQ,KAAR;AACH;;AAED,YAAI,KAAKX,KAAT,EACA;AACI,iBAAK,IAAIY,IAAI,CAAb,EAAgBA,IAAI,KAAKZ,KAAL,CAAWa,MAA/B,EAAuCD,GAAvC,EACZ;AACgB,oBAAMR,QAAQ,KAAKJ,KAAL,CAAWY,CAAX,CAAd;;AAEA,oBAAIR,MAAMF,QAAN,IAAkB,CAACE,MAAMF,QAAN,CAAeY,MAAtC,EACA;AACIH,4BAAQ,KAAR;AACA;AACH;AACJ;AACJ;;AAED,aAAKA,KAAL,GAAaA,KAAb;AACH,K;;iBAEMI,I,iBAAKtB,K,EAAOC,M,EACnB;AACI,YAAMsB,eAAe,IAAIxB,YAAJ,CAAiBC,KAAjB,EAAwBC,MAAxB,CAArB;;AAEA,aAAK,IAAIkB,IAAI,CAAb,EAAgBA,IAAI,CAApB,EAAuBA,GAAvB,EACA;AAAA;;AACII,yBAAaf,WAAb,CAAyB,wBAAcc,IAAd,SAAwBH,sDAAxB,8DAAzB,EAAoEA,CAApE;AACH;;AAED,eAAOI,YAAP;AACH,K;;;;;kBArEgBxB,Y","file":"ArrayTexture.js","sourcesContent":["import Texture from './BaseTexture';\nimport ImageResource from './resources/ImageResource';\nimport { TARGETS } from './../const';\n\nexport default class ArrayTexture extends Texture\n{\n    constructor(width, height, size, format)\n    {\n        super(null, 0, 1, width, height, format);\n\n        this.target = TARGETS.TEXTURE_2D_ARRAY;\n        this.size = size;\n        this._new = true;\n        this.array = [];\n    }\n\n    setResource(resource, index)\n    {\n        let layer = this.array[index];\n\n        if (!layer)\n        {\n            layer = this.array[index] = { index, texture: this, resource: null, texturePart: true, dirtyId: 0 };\n        }\n\n        layer.resource = resource;\n\n        resource.load.then((resource) =>\n{\n            if (layer.resource === resource)\n            {\n                this.validate();\n                this.dirtyId++;\n            }\n        });\n    }\n\n    validate()\n    {\n        let valid = true;\n\n        if (this.width === -1 || this.height === -1)\n        {\n            valid = false;\n        }\n\n        if (this.array)\n        {\n            for (let i = 0; i < this.array.length; i++)\n{\n                const layer = this.array[i];\n\n                if (layer.resource && !layer.resource.loaded)\n                {\n                    valid = false;\n                    break;\n                }\n            }\n        }\n\n        this.valid = valid;\n    }\n\n    static from(width, height, ...urls)\n    {\n        const arrayTexture = new ArrayTexture(width, height);\n\n        for (let i = 0; i < 6; i++)\n        {\n            arrayTexture.setResource(ImageResource.from(urls[i % urls.length]), i);\n        }\n\n        return arrayTexture;\n    }\n}\n"]}