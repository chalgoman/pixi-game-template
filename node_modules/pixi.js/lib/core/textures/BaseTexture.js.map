{"version":3,"sources":["../../../src/core/textures/BaseTexture.js"],"names":["BaseTexture","resource","scaleMode","SCALE_MODE","resolution","width","height","format","type","mipmap","MIPMAP_TEXTURES","uid","touched","RESOLUTION","isPowerOfTwo","premultiplyAlpha","wrapMode","WRAP_MODE","RGBA","UNSIGNED_BYTE","target","TEXTURE_2D","_glTextures","_new","dirtyId","valid","setResource","cacheId","validate","textureCacheIds","updateResolution","hight","resourceUpdated","remove","add","loaded","resourceLoaded","load","then","bind","catch","reason","console","warn","isPow2","realWidth","realHeight","emit","update","resize","destroy","dispose","removeFromCache","from","source","_pixiId","baseTexture","addToCache","fromFloat32Array","float32Array","Float32Array","texture","NEAREST","FLOAT","fromUint8Array","uint8Array","Uint8Array","id","indexOf","push","baseTextureFromCache","index","splice","i","length","fromFrame","fromImage","fromSVG","fromCanvas"],"mappings":"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","file":"BaseTexture.js","sourcesContent":["import {\n    uid, BaseTextureCache, TextureCache,\n} from '../utils';\n\nimport { FORMATS, TARGETS, TYPES, SCALE_MODES } from '../const';\nimport BufferResource from './resources/BufferResource';\nimport createResource from './resources/createResource';\n\nimport settings from '../settings';\nimport EventEmitter from 'eventemitter3';\nimport bitTwiddle from 'bit-twiddle';\n\nexport default class BaseTexture extends EventEmitter\n{\n\n    constructor(resource,\n                scaleMode = settings.SCALE_MODE,\n                resolution,\n                width,\n                height,\n                format,\n                type,\n                mipmap = settings.MIPMAP_TEXTURES)\n    {\n        super();\n\n        this.uid = uid();\n\n        this.touched = 0;\n\n        /**\n         * The width of texture\n         *\n         * @member {Number}\n         */\n        this.width = width || -1;\n        /**\n         * The height of texture\n         *\n         * @member {Number}\n         */\n        this.height = height || -1;\n\n        /**\n         * The resolution / device pixel ratio of the texture\n         *\n         * @member {number}\n         * @default 1\n         */\n        this.resolution = resolution || settings.RESOLUTION;\n\n        /**\n         * Whether or not the texture is a power of two, try to use power of two textures as much\n         * as you can\n         *\n         * @private\n         * @member {boolean}\n         */\n        this.isPowerOfTwo = false;\n\n        /**\n         * If mipmapping was used for this texture, enable and disable with enableMipmap()\n         *\n         * @member {Boolean}\n         */\n        //  TODO fix mipmapping..\n        mipmap = false;\n        this.mipmap = mipmap;\n\n        /**\n         * Set to true to enable pre-multiplied alpha\n         *\n         * @member {Boolean}\n         */\n        this.premultiplyAlpha = true;\n\n        /**\n         * [wrapMode description]\n         * @type {number}\n         */\n        this.wrapMode = settings.WRAP_MODE;\n\n        /**\n         * The scale mode to apply when scaling this texture\n         *\n         * @member {number}\n         * @default PIXI.settings.SCALE_MODE\n         * @see PIXI.SCALE_MODES\n         */\n        this.scaleMode = scaleMode;// || settings.SCALE_MODE;\n\n        /**\n         * The pixel format of the texture. defaults to gl.RGBA\n         *\n         * @member {Number}\n         */\n        this.format = format || FORMATS.RGBA;\n        this.type = type || TYPES.UNSIGNED_BYTE; // UNSIGNED_BYTE\n\n        this.target = TARGETS.TEXTURE_2D; // gl.TEXTURE_2D\n\n        this._glTextures = {};\n\n        this._new = true;\n\n        this.dirtyId = 0;\n\n        this.valid = false;\n\n        this.resource = null;\n\n        if (resource)\n        {\n            // lets convert this to a resource..\n            resource = createResource(resource);\n            this.setResource(resource);\n        }\n\n        this.cacheId = null;\n\n        this.validate();\n\n        this.textureCacheIds = [];\n\n        /**\n         * Fired when a not-immediately-available source finishes loading.\n         *\n         * @protected\n         * @event PIXI.BaseTexture#loaded\n         * @param {PIXI.BaseTexture} baseTexture - Resource loaded.\n         */\n\n        /**\n         * Fired when a not-immediately-available source fails to load.\n         *\n         * @protected\n         * @event PIXI.BaseTexture#error\n         * @param {PIXI.BaseTexture} baseTexture - Resource errored.\n         */\n\n        /**\n         * Fired when BaseTexture is updated.\n         *\n         * @protected\n         * @event PIXI.BaseTexture#loaded\n         * @param {PIXI.BaseTexture} baseTexture - Resource loaded.\n         */\n\n        /**\n         * Fired when BaseTexture is destroyed.\n         *\n         * @protected\n         * @event PIXI.BaseTexture#error\n         * @param {PIXI.BaseTexture} baseTexture - Resource errored.\n         */\n\n        /**\n         * Fired when BaseTexture is updated.\n         *\n         * @protected\n         * @event PIXI.BaseTexture#update\n         * @param {PIXI.BaseTexture} baseTexture - Instance of texture being updated.\n         */\n\n        /**\n         * Fired when BaseTexture is destroyed.\n         *\n         * @protected\n         * @event PIXI.BaseTexture#dispose\n         * @param {PIXI.BaseTexture} baseTexture - Instance of texture being destroyed.\n         */\n    }\n\n    updateResolution()\n    {\n        const resource = this.resource;\n\n        if (resource && resource.width !== -1 && resource.hight !== -1)\n        {\n            this.width = resource.width / this.resolution;\n            this.height = resource.height / this.resolution;\n        }\n    }\n\n    setResource(resource)\n    {\n        // TODO currently a resource can only be set once..\n\n        if (this.resource)\n        {\n            this.resource.resourceUpdated.remove(this);\n        }\n\n        this.resource = resource;\n\n        resource.resourceUpdated.add(this); // calls resourceUpaded\n\n        if (resource.loaded)\n        {\n            this.resourceLoaded(resource);\n        }\n\n        resource.load\n        .then(this.resourceLoaded.bind(this))\n        .catch((reason) =>\n        {\n            // failed to load - maybe resource was destroyed before it loaded.\n            console.warn(reason);\n        });\n    }\n\n    resourceLoaded(resource)\n    {\n        if (this.resource === resource)\n        {\n            this.updateResolution();\n\n            this.validate();\n\n            if (this.valid)\n            {\n                this.isPowerOfTwo = bitTwiddle.isPow2(this.realWidth) && bitTwiddle.isPow2(this.realHeight);\n\n                // we have not swapped half way!\n                this.dirtyId++;\n\n                this.emit('loaded', this);\n            }\n        }\n    }\n\n    resourceUpdated()\n    {\n        // the resource was updated..\n        this.dirtyId++;\n    }\n\n    update()\n    {\n        this.dirtyId++;\n    }\n\n    resize(width, height)\n    {\n        this.width = width;\n        this.height = height;\n\n        this.dirtyId++;\n    }\n\n    validate()\n    {\n        let valid = true;\n\n        if (this.width === -1 || this.height === -1)\n        {\n            valid = false;\n        }\n\n        this.valid = valid;\n    }\n\n    get realWidth()\n    {\n        return this.width * this.resolution;\n    }\n\n    get realHeight()\n    {\n        return this.height * this.resolution;\n    }\n\n    /**\n     * Destroys this base texture\n     *\n     */\n    destroy()\n    {\n        if (this.cacheId)\n        {\n            delete BaseTextureCache[this.cacheId];\n            delete TextureCache[this.cacheId];\n\n            this.cacheId = null;\n        }\n\n        // remove and destroy the resource\n\n        if (this.resource)\n        {\n            this.resource.destroy();\n            this.resource = null;\n        }\n\n        // finally let the webGL renderer know..\n        this.dispose();\n\n        BaseTexture.removeFromCache(this);\n        this.textureCacheIds = null;\n    }\n\n    /**\n     * Frees the texture from WebGL memory without destroying this texture object.\n     * This means you can still use the texture later which will upload it to GPU\n     * memory again.\n     *\n     * @fires PIXI.BaseTexture#dispose\n     */\n    dispose()\n    {\n        this.emit('dispose', this);\n    }\n\n    /**\n     * Helper function that creates a base texture based on the source you provide.\n     * The source can be - image url, image element, canvas element.\n     *\n     * @static\n     * @param {string|HTMLImageElement|HTMLCanvasElement} source - The source to create base texture from.\n     * @param {number} [scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES} for possible values\n     * @param {number} [sourceScale=(auto)] - Scale for the original image, used with Svg images.\n     * @return {PIXI.BaseTexture} The new base texture.\n     */\n    static from(source, scaleMode)\n    {\n        let cacheId = null;\n\n        if (typeof source === 'string')\n        {\n            cacheId = source;\n        }\n        else\n        {\n            if (!source._pixiId)\n            {\n                source._pixiId = `pixiid_${uid()}`;\n            }\n\n            cacheId = source._pixiId;\n        }\n\n        let baseTexture = BaseTextureCache[cacheId];\n\n        if (!baseTexture)\n        {\n            baseTexture = new BaseTexture(source, scaleMode);\n            baseTexture.cacheId = cacheId;\n            BaseTexture.addToCache(baseTexture, cacheId);\n        }\n\n        return baseTexture;\n    }\n\n    static fromFloat32Array(width, height, float32Array)\n    {\n        float32Array = float32Array || new Float32Array(width * height * 4);\n\n        const texture = new BaseTexture(new BufferResource(float32Array),\n                                  SCALE_MODES.NEAREST,\n                                  1,\n                                  width,\n                                  height,\n                                  FORMATS.RGBA,\n                                  TYPES.FLOAT);\n\n        return texture;\n    }\n\n    static fromUint8Array(width, height, uint8Array)\n    {\n        uint8Array = uint8Array || new Uint8Array(width * height * 4);\n\n        const texture = new BaseTexture(new BufferResource(uint8Array),\n                                  SCALE_MODES.NEAREST,\n                                  1,\n                                  width,\n                                  height,\n                                  FORMATS.RGBA,\n                                  TYPES.UNSIGNED_BYTE);\n\n        return texture;\n    }\n\n    /**\n     * Adds a BaseTexture to the global BaseTextureCache. This cache is shared across the whole PIXI object.\n     *\n     * @static\n     * @param {PIXI.BaseTexture} baseTexture - The BaseTexture to add to the cache.\n     * @param {string} id - The id that the BaseTexture will be stored against.\n     */\n    static addToCache(baseTexture, id)\n    {\n        if (id)\n        {\n            if (baseTexture.textureCacheIds.indexOf(id) === -1)\n            {\n                baseTexture.textureCacheIds.push(id);\n            }\n\n            // @if DEBUG\n            /* eslint-disable no-console */\n            if (BaseTextureCache[id])\n            {\n                console.warn(`BaseTexture added to the cache with an id [${id}] that already had an entry`);\n            }\n            /* eslint-enable no-console */\n            // @endif\n\n            BaseTextureCache[id] = baseTexture;\n        }\n    }\n\n    /**\n     * Remove a BaseTexture from the global BaseTextureCache.\n     *\n     * @static\n     * @param {string|PIXI.BaseTexture} baseTexture - id of a BaseTexture to be removed, or a BaseTexture instance itself.\n     * @return {PIXI.BaseTexture|null} The BaseTexture that was removed.\n     */\n    static removeFromCache(baseTexture)\n    {\n        if (typeof baseTexture === 'string')\n        {\n            const baseTextureFromCache = BaseTextureCache[baseTexture];\n\n            if (baseTextureFromCache)\n            {\n                const index = baseTextureFromCache.textureCacheIds.indexOf(baseTexture);\n\n                if (index > -1)\n                {\n                    baseTextureFromCache.textureCacheIds.splice(index, 1);\n                }\n\n                delete BaseTextureCache[baseTexture];\n\n                return baseTextureFromCache;\n            }\n        }\n        else\n        {\n            for (let i = 0; i < baseTexture.textureCacheIds.length; ++i)\n            {\n                delete BaseTextureCache[baseTexture.textureCacheIds[i]];\n            }\n\n            baseTexture.textureCacheIds.length = 0;\n\n            return baseTexture;\n        }\n\n        return null;\n    }\n}\n\nBaseTexture.fromFrame = BaseTexture.fromFrame;\nBaseTexture.fromImage = BaseTexture.from;\nBaseTexture.fromSVG = BaseTexture.from;\nBaseTexture.fromCanvas = BaseTexture.from;\n"]}