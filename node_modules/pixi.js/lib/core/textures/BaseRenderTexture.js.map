{"version":3,"sources":["../../../src/core/textures/BaseRenderTexture.js"],"names":["BaseRenderTexture","width","height","scaleMode","resolution","hasLoaded","_canvasRenderTarget","clearColor","frameBuffer","addColorTexture","enableStencil","stencilMaskStack","filterStack","resize","destroy","renderer"],"mappings":";;;;AAAA;;;;AACA;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAuCqBA,iB;;;AAEjB;;;;;;AAMA,+BACA;AAAA,QADYC,KACZ,uEADoB,GACpB;AAAA,QADyBC,MACzB,uEADkC,GAClC;AAAA,QADuCC,SACvC;AAAA,QADkDC,UAClD;;AAAA;;AAAA,iDACI,wBAAM,IAAN,EAAYD,SAAZ,EAAuBC,UAAvB,EAAmCH,KAAnC,EAA0CC,MAA1C,CADJ;;AAGI,UAAKG,SAAL,GAAiB,IAAjB;;AAEA;;;;;;AAMR;;AAEQ;;;;;;AAMA,UAAKC,mBAAL,GAA2B,IAA3B;;AAEA,UAAKC,UAAL,GAAkB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAlB;;AAEA,UAAKC,WAAL,GAAmB,0BAAgBP,KAAhB,EAAuBC,MAAvB,EAClBO,eADkB,CACF,CADE;AAEnB;AACA;AAHmB,KAIlBC,aAJkB,EAAnB;;AAMA;;;;;AAKA,UAAKC,gBAAL,GAAwB,EAAxB;;AAEA;;;;;AAKA,UAAKC,WAAL,GAAmB,EAAnB;AAzCJ;AA0CC;;AAED;;;;;;;;8BAMAC,M,mBAAOZ,K,EAAOC,M,EACd;AACI,2BAAMW,MAAN,YAAaZ,KAAb,EAAoBC,MAApB;AACA,SAAKM,WAAL,CAAiBK,MAAjB,CAAwBZ,KAAxB,EAA+BC,MAA/B;AACH,G;;AAED;;;;;;8BAIAY,O,sBACA;AACI,2BAAMA,OAAN,YAAc,IAAd;AACA,SAAKC,QAAL,GAAgB,IAAhB;AACH,G;;;;;kBAzEgBf,iB","file":"BaseRenderTexture.js","sourcesContent":["import BaseTexture from './BaseTexture';\nimport FrameBuffer from './FrameBuffer';\n\n/**\n * A BaseRenderTexture is a special texture that allows any PixiJS display object to be rendered to it.\n *\n * __Hint__: All DisplayObjects (i.e. Sprites) that render to a BaseRenderTexture should be preloaded\n * otherwise black rectangles will be drawn instead.\n *\n * A BaseRenderTexture takes a snapshot of any Display Object given to its render method. The position\n * and rotation of the given Display Objects is ignored. For example:\n *\n * ```js\n * let renderer = PIXI.autoDetectRenderer(1024, 1024, { view: canvas, ratio: 1 });\n * let baseRenderTexture = new PIXI.BaseRenderTexture(renderer, 800, 600);\n * let sprite = PIXI.Sprite.fromImage(\"spinObj_01.png\");\n *\n * sprite.position.x = 800/2;\n * sprite.position.y = 600/2;\n * sprite.anchor.x = 0.5;\n * sprite.anchor.y = 0.5;\n *\n * baseRenderTexture.render(sprite);\n * ```\n *\n * The Sprite in this case will be rendered using its local transform. To render this sprite at 0,0\n * you can clear the transform\n *\n * ```js\n *\n * sprite.setTransform()\n *\n * let baseRenderTexture = new PIXI.BaseRenderTexture(100, 100);\n * let renderTexture = new PIXI.RenderTexture(baseRenderTexture);\n *\n * renderer.render(sprite, renderTexture);  // Renders to center of RenderTexture\n * ```\n *\n * @class\n * @extends PIXI.BaseTexture\n * @memberof PIXI\n */\nexport default class BaseRenderTexture extends BaseTexture\n{\n    /**\n     * @param {number} [width=100] - The width of the base render texture\n     * @param {number} [height=100] - The height of the base render texture\n     * @param {number} [scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES} for possible values\n     * @param {number} [resolution=1] - The resolution / device pixel ratio of the texture being generated\n     */\n    constructor(width = 100, height = 100, scaleMode, resolution)\n    {\n        super(null, scaleMode, resolution, width, height);\n\n        this.hasLoaded = true;\n\n        /**\n         * A map of renderer IDs to webgl renderTargets\n         *\n         * @private\n         * @member {object<number, WebGLTexture>}\n         */\n//        this._glRenderTargets = {};\n\n        /**\n         * A reference to the canvas render target (we only need one as this can be shared across renderers)\n         *\n         * @private\n         * @member {object<number, WebGLTexture>}\n         */\n        this._canvasRenderTarget = null;\n\n        this.clearColor = [0, 0, 0, 0];\n\n        this.frameBuffer = new FrameBuffer(width, height)\n        .addColorTexture(0, this)\n        // TODO this shoul dreally only be enabled if its required\n        // at the point of a mask being rendered.\n        .enableStencil();\n\n        /**\n         * The data structure for the stencil masks\n         *\n         * @member {PIXI.Graphics[]}\n         */\n        this.stencilMaskStack = [];\n\n        /**\n         * The data structure for the filters\n         *\n         * @member {PIXI.Graphics[]}\n         */\n        this.filterStack = [];\n    }\n\n    /**\n     * Resizes the BaseRenderTexture.\n     *\n     * @param {number} width - The width to resize to.\n     * @param {number} height - The height to resize to.\n     */\n    resize(width, height)\n    {\n        super.resize(width, height);\n        this.frameBuffer.resize(width, height);\n    }\n\n    /**\n     * Destroys this texture\n     *\n     */\n    destroy()\n    {\n        super.destroy(true);\n        this.renderer = null;\n    }\n}\n"]}