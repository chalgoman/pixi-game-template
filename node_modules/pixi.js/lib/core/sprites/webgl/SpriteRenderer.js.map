{"version":3,"sources":["../../../../src/core/sprites/webgl/SpriteRenderer.js"],"names":["TICK","SpriteRenderer","renderer","vertSize","vertByteSize","size","SPRITE_BATCH_SIZE","buffers","i","nextPow2","push","indices","indexBuffer","shader","currentIndex","groups","k","textures","textureCount","ids","start","blend","sprites","vertexBuffers","vaos","vaoMax","vertexCount","on","onPrerender","contextChange","gl","legacy","MAX_TEXTURES","Math","min","getParameter","MAX_TEXTURE_IMAGE_UNITS","SPRITE_MAX_TEXTURES","buffer","addAttribute","FLOAT","UNSIGNED_SHORT","UNSIGNED_BYTE","addIndex","render","sprite","flush","_texture","_uvs","np2","log2","float32View","uint32View","index","nextTexture","currentTexture","groupCount","textureId","currentGroup","vertexData","uvs","blendMode","baseTexture","_id","_enabled","uvsUint32","roundPixels","resolution","_tintRGB","worldAlpha","CAN_UPLOAD_SAME_BUFFER","update","vertices","geometry","bind","updateBuffers","group","groupTextureCount","j","texture","state","setBlendMode","drawElements","TRIANGLES","stop","destroy","off","length","registerPlugin"],"mappings":"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","file":"SpriteRenderer.js","sourcesContent":["import ObjectRenderer from '../../renderers/webgl/utils/ObjectRenderer';\nimport WebGLRenderer from '../../renderers/webgl/WebGLRenderer';\nimport createIndicesForQuads from '../../utils/createIndicesForQuads';\nimport generateMultiTextureShader from './generateMultiTextureShader';\nimport checkMaxIfStatmentsInShader from '../../renderers/webgl/utils/checkMaxIfStatmentsInShader';\nimport Buffer from './BatchBuffer';\nimport settings from '../../settings';\nimport bitTwiddle from 'bit-twiddle';\nimport Geometry from '../../geometry/Geometry';\n// TODO rename this\nimport GeometryBuffer from '../../geometry/Buffer';\n\nlet TICK = 0;\n// const TEXTURE_TICK = 0;\n\n/**\n * Renderer dedicated to drawing and batching sprites.\n *\n * @class\n * @private\n * @memberof PIXI\n * @extends PIXI.ObjectRenderer\n */\nexport default class SpriteRenderer extends ObjectRenderer\n{\n    /**\n     * @param {PIXI.WebGLRenderer} renderer - The renderer this sprite batch works for.\n     */\n    constructor(renderer)\n    {\n        super(renderer);\n\n        /**\n         * Number of values sent in the vertex buffer.\n         * aVertexPosition(2), aTextureCoord(1), aColor(1), aTextureId(1) = 5\n         *\n         * @member {number}\n         */\n        this.vertSize = 5;\n\n        /**\n         * The size of the vertex information in bytes.\n         *\n         * @member {number}\n         */\n        this.vertByteSize = this.vertSize * 4;\n\n        /**\n         * The number of images in the SpriteRenderer before it flushes.\n         *\n         * @member {number}\n         */\n        this.size = settings.SPRITE_BATCH_SIZE; // 2000 is a nice balance between mobile / desktop\n\n        // the total number of bytes in our batch\n        // let numVerts = this.size * 4 * this.vertByteSize;\n\n        this.buffers = [];\n        for (let i = 1; i <= bitTwiddle.nextPow2(this.size); i *= 2)\n        {\n            this.buffers.push(new Buffer(i * 4 * this.vertByteSize));\n        }\n\n        /**\n         * Holds the indices of the geometry (quads) to draw\n         *\n         * @member {Uint16Array}\n         */\n        this.indices = createIndicesForQuads(this.size);\n        this.indexBuffer = new GeometryBuffer(this.indices, true, true);\n\n        /**\n         * The default shaders that is used if a sprite doesn't have a more specific one.\n         * there is a shader for each number of textures that can be rendererd.\n         * These shaders will also be generated on the fly as required.\n         * @member {PIXI.Shader[]}\n         */\n        this.shader = null;\n\n        this.currentIndex = 0;\n        this.groups = [];\n\n        for (let k = 0; k < this.size; k++)\n        {\n            this.groups[k] = { textures: [], textureCount: 0, ids: [], size: 0, start: 0, blend: 0 };\n        }\n\n        this.sprites = [];\n\n        this.vertexBuffers = [];\n        this.vaos = [];\n\n        this.vaoMax = 2;\n        this.vertexCount = 0;\n\n        this.renderer.on('prerender', this.onPrerender, this);\n    }\n\n    /**\n     * Sets up the renderer context and necessary buffers.\n     *\n     * @private\n     */\n    contextChange()\n    {\n        const gl = this.renderer.gl;\n\n        if (this.renderer.legacy)\n        {\n            this.MAX_TEXTURES = 1;\n        }\n        else\n        {\n            // step 1: first check max textures the GPU can handle.\n            this.MAX_TEXTURES = Math.min(gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS), settings.SPRITE_MAX_TEXTURES);\n\n            // step 2: check the maximum number of if statements the shader can have too..\n            this.MAX_TEXTURES = checkMaxIfStatmentsInShader(this.MAX_TEXTURES, gl);\n        }\n\n        // generate generateMultiTextureProgram, may be a better move?\n        this.shader = generateMultiTextureShader(gl, this.MAX_TEXTURES);\n\n        // we use the second shader as the first one depending on your browser may omit aTextureId\n        // as it is not used by the shader so is optimized out.\n        for (let i = 0; i < this.vaoMax; i++)\n        {\n            const buffer = new GeometryBuffer(null, false);\n\n            /* eslint-disable max-len */\n            this.vaos[i] = new Geometry()\n            .addAttribute('aVertexPosition', buffer, 2, false, gl.FLOAT)\n            .addAttribute('aTextureCoord', buffer, 2, true, gl.UNSIGNED_SHORT)\n            .addAttribute('aColor', buffer, 4, true, gl.UNSIGNED_BYTE)\n            .addAttribute('aTextureId', buffer, 1, true, gl.FLOAT)\n            .addIndex(this.indexBuffer);\n            /* eslint-enable max-len */\n\n            this.vertexBuffers[i] = buffer;\n        }\n    }\n\n    /**\n     * Called before the renderer starts rendering.\n     *\n     */\n    onPrerender()\n    {\n        this.vertexCount = 0;\n    }\n\n    /**\n     * Renders the sprite object.\n     *\n     * @param {PIXI.Sprite} sprite - the sprite to render when using this spritebatch\n     */\n    render(sprite)\n    {\n        // TODO set blend modes..\n        // check texture..\n        if (this.currentIndex >= this.size)\n        {\n            this.flush();\n        }\n\n        // get the uvs for the texture\n\n        // if the uvs have not updated then no point rendering just yet!\n        if (!sprite._texture._uvs)\n        {\n            return;\n        }\n\n        // push a texture.\n        // increment the batchsize\n        this.sprites[this.currentIndex++] = sprite;\n    }\n\n    /**\n     * Renders the content and empties the current batch.\n     *\n     */\n    flush()\n    {\n        if (this.currentIndex === 0)\n        {\n            return;\n        }\n\n        const gl = this.renderer.gl;\n        const MAX_TEXTURES = this.MAX_TEXTURES;\n\n        const np2 = bitTwiddle.nextPow2(this.currentIndex);\n        const log2 = bitTwiddle.log2(np2);\n        const buffer = this.buffers[log2];\n\n        const sprites = this.sprites;\n        const groups = this.groups;\n\n        const float32View = buffer.float32View;\n        const uint32View = buffer.uint32View;\n\n       // const touch = 0;// this.renderer.textureGC.count;\n\n        let index = 0;\n        let nextTexture;\n        let currentTexture;\n        let groupCount = 1;\n        let textureId = 0;\n        let textureCount = 0;\n        let currentGroup = groups[0];\n        let vertexData;\n        let uvs;\n        let blendMode = sprites[0].blendMode;\n\n        currentGroup.textureCount = 0;\n        currentGroup.start = 0;\n        currentGroup.blend = blendMode;\n\n        TICK++;\n\n        let i;\n\n        for (i = 0; i < this.currentIndex; ++i)\n        {\n            // upload the sprite elemetns...\n            // they have all ready been calculated so we just need to push them into the buffer.\n\n            // upload the sprite elemetns...\n            // they have all ready been calculated so we just need to push them into the buffer.\n            const sprite = sprites[i];\n\n            nextTexture = sprite._texture.baseTexture;\n            textureId = nextTexture._id;\n\n            if (blendMode !== sprite.blendMode)\n            {\n                blendMode = sprite.blendMode;\n\n                // force the batch to break!\n                currentTexture = null;\n                textureCount = MAX_TEXTURES;\n                TICK++;\n            }\n\n            if (currentTexture !== nextTexture)\n            {\n                currentTexture = nextTexture;\n\n                if (nextTexture._enabled !== TICK)\n                {\n                    if (textureCount === MAX_TEXTURES)\n                    {\n                        TICK++;\n\n                        textureCount = 0;\n\n                        currentGroup.size = i - currentGroup.start;\n\n                        currentGroup = groups[groupCount++];\n                        currentGroup.textureCount = 0;\n                        currentGroup.blend = blendMode;\n                        currentGroup.start = i;\n                    }\n\n                    nextTexture._enabled = TICK;\n                    nextTexture._id = textureCount;\n\n                    currentGroup.textures[currentGroup.textureCount++] = nextTexture;\n                    textureCount++;\n                }\n            }\n\n            vertexData = sprite.vertexData;\n\n            // TODO this sum does not need to be set each frame..\n            uvs = sprite._texture._uvs.uvsUint32;\n            textureId = nextTexture._id;\n\n            if (this.renderer.roundPixels)\n            {\n                const resolution = this.renderer.resolution;\n\n                // xy\n                float32View[index] = ((vertexData[0] * resolution) | 0) / resolution;\n                float32View[index + 1] = ((vertexData[1] * resolution) | 0) / resolution;\n\n                // xy\n                float32View[index + 5] = ((vertexData[2] * resolution) | 0) / resolution;\n                float32View[index + 6] = ((vertexData[3] * resolution) | 0) / resolution;\n\n                // xy\n                float32View[index + 10] = ((vertexData[4] * resolution) | 0) / resolution;\n                float32View[index + 11] = ((vertexData[5] * resolution) | 0) / resolution;\n\n                // xy\n                float32View[index + 15] = ((vertexData[6] * resolution) | 0) / resolution;\n                float32View[index + 16] = ((vertexData[7] * resolution) | 0) / resolution;\n            }\n            else\n            {\n                // xy\n                float32View[index] = vertexData[0];\n                float32View[index + 1] = vertexData[1];\n\n                // xy\n                float32View[index + 5] = vertexData[2];\n                float32View[index + 6] = vertexData[3];\n\n                // xy\n                float32View[index + 10] = vertexData[4];\n                float32View[index + 11] = vertexData[5];\n\n                // xy\n                float32View[index + 15] = vertexData[6];\n                float32View[index + 16] = vertexData[7];\n            }\n\n            uint32View[index + 2] = uvs[0];\n            uint32View[index + 7] = uvs[1];\n            uint32View[index + 12] = uvs[2];\n            uint32View[index + 17] = uvs[3];\n\n            /* eslint-disable max-len */\n            uint32View[index + 3] = uint32View[index + 8] = uint32View[index + 13] = uint32View[index + 18] = sprite._tintRGB + (Math.min(sprite.worldAlpha, 1) * 255 << 24);\n\n            float32View[index + 4] = float32View[index + 9] = float32View[index + 14] = float32View[index + 19] = textureId;\n            /* eslint-enable max-len */\n\n            index += 20;\n        }\n\n        currentGroup.size = i - currentGroup.start;\n\n        if (!settings.CAN_UPLOAD_SAME_BUFFER)\n        {\n            // this is still needed for IOS performance..\n            // it really does not like uploading to the same buffer in a single frame!\n            if (this.vaoMax <= this.vertexCount)\n            {\n                this.vaoMax++;\n\n                const buffer = new GeometryBuffer(null, false);\n\n                /* eslint-disable max-len */\n                this.vaos[this.vertexCount] = new Geometry()\n                .addAttribute('aVertexPosition', buffer, 2, false, gl.FLOAT)\n                .addAttribute('aTextureCoord', buffer, 2, true, gl.UNSIGNED_SHORT)\n                .addAttribute('aColor', buffer, 4, true, gl.UNSIGNED_BYTE)\n                .addAttribute('aTextureId', buffer, 1, true, gl.FLOAT)\n                .addIndex(this.indexBuffer);\n                /* eslint-enable max-len */\n\n                this.vertexBuffers[this.vertexCount] = buffer;\n            }\n\n            this.vertexBuffers[this.vertexCount].update(buffer.vertices, 0);\n            this.renderer.geometry.bind(this.vaos[this.vertexCount]);\n\n            this.vertexCount++;\n        }\n        else\n        {\n            // lets use the faster option, always use buffer number 0\n            this.vertexBuffers[this.vertexCount].update(buffer.vertices, 0);\n\n            this.renderer.geometry.updateBuffers();\n        }\n\n        // / render the groups..\n        for (i = 0; i < groupCount; i++)\n{\n            const group = groups[i];\n            const groupTextureCount = group.textureCount;\n\n            for (let j = 0; j < groupTextureCount; j++)\n            {\n                this.renderer.texture.bind(group.textures[j], j);\n            }\n\n            // set the blend mode..\n            this.renderer.state.setBlendMode(group.blend);\n\n            gl.drawElements(gl.TRIANGLES, group.size * 6, gl.UNSIGNED_SHORT, group.start * 6 * 2);\n        }\n\n        // reset elements for the next flush\n        this.currentIndex = 0;\n    }\n\n    /**\n     * Starts a new sprite batch.\n     */\n    start()\n    {\n        this.renderer.shader.bind(this.shader);\n\n        if (settings.CAN_UPLOAD_SAME_BUFFER)\n        {\n            // bind buffer #0, we don't need others\n            this.renderer.geometry.bind(this.vaos[this.vertexCount]);\n        }\n    }\n\n    /**\n     * Stops and flushes the current batch.\n     *\n     */\n    stop()\n    {\n        this.flush();\n    }\n\n    /**\n     * Destroys the SpriteRenderer.\n     *\n     */\n    destroy()\n    {\n        for (let i = 0; i < this.vaoMax; i++)\n        {\n            if (this.vertexBuffers[i])\n            {\n                this.vertexBuffers[i].destroy();\n            }\n            if (this.vaos[i])\n            {\n                this.vaos[i].destroy();\n            }\n        }\n\n        if (this.indexBuffer)\n        {\n            this.indexBuffer.destroy();\n        }\n\n        this.renderer.off('prerender', this.onPrerender, this);\n\n        if (this.shader)\n        {\n            this.shader.destroy();\n            this.shader = null;\n        }\n\n        this.vertexBuffers = null;\n        this.vaos = null;\n        this.indexBuffer = null;\n        this.indices = null;\n\n        this.sprites = null;\n\n        for (let i = 0; i < this.buffers.length; ++i)\n        {\n            this.buffers[i].destroy();\n        }\n\n        super.destroy();\n    }\n}\n\nWebGLRenderer.registerPlugin('sprite', SpriteRenderer);\n"]}