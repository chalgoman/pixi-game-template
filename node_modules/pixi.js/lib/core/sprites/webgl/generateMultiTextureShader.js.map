{"version":3,"sources":["../../../../src/core/sprites/webgl/generateMultiTextureShader.js"],"names":["generateMultiTextureShader","fragTemplate","join","gl","maxTextures","sampleValues","Int32Array","i","uniforms","default","from","uSamplers","vertexSrc","fragmentSrc","replace","generateSampleSrc","shader","src"],"mappings":";;;kBAmBwBA,0B;;AAnBxB;;;;AACA;;;;AAEA;;;;AAEA,IAAMC,eAAe,CACjB,6BADiB,EAEjB,sBAFiB,EAGjB,2BAHiB,EAIjB,uCAJiB,EAMjB,kBANiB,EAOjB,aAPiB,EAQjB,0CARiB,EASjB,WATiB,EAUjB,gCAViB,EAWjB,GAXiB,EAYnBC,IAZmB,CAYd,IAZc,CAArB;;AAce,SAASF,0BAAT,CAAoCG,EAApC,EAAwCC,WAAxC,EACf;AACI,QAAMC,eAAe,IAAIC,UAAJ,CAAeF,WAAf,CAArB;;AAEA,SAAK,IAAIG,IAAI,CAAb,EAAgBA,IAAIH,WAApB,EAAiCG,GAAjC,EACA;AACIF,qBAAaE,CAAb,IAAkBA,CAAlB;AACH;;AAED,QAAMC,WAAW;AACbC,iBAAS,uBAAaC,IAAb,CAAkB,EAAEC,WAAWN,YAAb,EAAlB,EAA+C,IAA/C;AADI,KAAjB;;AAIA,QAAMO,ofAAN;AACA,QAAIC,cAAcZ,YAAlB;;AAEAY,kBAAcA,YAAYC,OAAZ,CAAoB,WAApB,EAAiCV,WAAjC,CAAd;AACAS,kBAAcA,YAAYC,OAAZ,CAAoB,aAApB,EAAmCC,kBAAkBX,WAAlB,CAAnC,CAAd;;AAEA,QAAMY,SAAS,iBAAON,IAAP,CAAYE,SAAZ,EAAuBC,WAAvB,EAAoCL,QAApC,CAAf;;AAEA,WAAOQ,MAAP;AACH;;AAED,SAASD,iBAAT,CAA2BX,WAA3B,EACA;AACI,QAAIa,MAAM,EAAV;;AAEAA,WAAO,IAAP;AACAA,WAAO,IAAP;;AAEA,SAAK,IAAIV,IAAI,CAAb,EAAgBA,IAAIH,WAApB,EAAiCG,GAAjC,EACA;AACI,YAAIA,IAAI,CAAR,EACA;AACIU,mBAAO,SAAP;AACH;;AAED,YAAIV,IAAIH,cAAc,CAAtB,EACA;AACIa,wCAA0BV,CAA1B;AACH;;AAEDU,eAAO,KAAP;AACAA,oDAA0CV,CAA1C;AACAU,eAAO,KAAP;AACH;;AAEDA,WAAO,IAAP;AACAA,WAAO,IAAP;;AAEA,WAAOA,GAAP;AACH","file":"generateMultiTextureShader.js","sourcesContent":["import Shader from '../../shader/Shader';\nimport UniformGroup from '../../shader/UniformGroup';\nimport { readFileSync } from 'fs';\nimport { join } from 'path';\n\nconst fragTemplate = [\n    'varying vec2 vTextureCoord;',\n    'varying vec4 vColor;',\n    'varying float vTextureId;',\n    'uniform sampler2D uSamplers[%count%];',\n\n    'void main(void){',\n    'vec4 color;',\n    'float textureId = floor(vTextureId+0.5);',\n    '%forloop%',\n    'gl_FragColor = color * vColor;',\n    '}',\n].join('\\n');\n\nexport default function generateMultiTextureShader(gl, maxTextures)\n{\n    const sampleValues = new Int32Array(maxTextures);\n\n    for (let i = 0; i < maxTextures; i++)\n    {\n        sampleValues[i] = i;\n    }\n\n    const uniforms = {\n        default: UniformGroup.from({ uSamplers: sampleValues }, true),\n    };\n\n    const vertexSrc = readFileSync(join(__dirname, './texture.vert'), 'utf8');\n    let fragmentSrc = fragTemplate;\n\n    fragmentSrc = fragmentSrc.replace(/%count%/gi, maxTextures);\n    fragmentSrc = fragmentSrc.replace(/%forloop%/gi, generateSampleSrc(maxTextures));\n\n    const shader = Shader.from(vertexSrc, fragmentSrc, uniforms);\n\n    return shader;\n}\n\nfunction generateSampleSrc(maxTextures)\n{\n    let src = '';\n\n    src += '\\n';\n    src += '\\n';\n\n    for (let i = 0; i < maxTextures; i++)\n    {\n        if (i > 0)\n        {\n            src += '\\nelse ';\n        }\n\n        if (i < maxTextures - 1)\n        {\n            src += `if(textureId == ${i}.0)`;\n        }\n\n        src += '\\n{';\n        src += `\\n\\tcolor = texture2D(uSamplers[${i}], vTextureCoord);`;\n        src += '\\n}';\n    }\n\n    src += '\\n';\n    src += '\\n';\n\n    return src;\n}\n"]}