{"version":3,"sources":["../../../../src/core/graphics/webgl/WebGLGraphicsData.js"],"names":["WebGLGraphicsData","gl","shader","color","points","indices","buffer","indexBuffer","dirty","geometry","addAttribute","addIndex","reset","length","upload","glPoints","Float32Array","update","glIndices","Uint16Array","destroy","vao"],"mappings":";;;;AAAA;;;;AACA;;;;;;;;AAEA;;;;;;;IAOqBA,iB;AAEjB;;;;AAIA,6BAAYC,EAAZ,EAAgBC,MAAhB,EACA;AAAA;;AACI;;;;;AAKA,SAAKD,EAAL,GAAUA,EAAV;;AAEA;AACA;;;;AAIA,SAAKE,KAAL,GAAa,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAb,CAbJ,CAa4B;;AAExB;;;;AAIA,SAAKC,MAAL,GAAc,EAAd;;AAEA;;;;AAIA,SAAKC,OAAL,GAAe,EAAf;AACA;;;;AAIA,SAAKC,MAAL,GAAc,sBAAd;;AAEA;;;;AAIA,SAAKC,WAAL,GAAmB,sBAAnB;;AAEA;;;;AAIA,SAAKC,KAAL,GAAa,IAAb;;AAEA;;;;AAIA,SAAKN,MAAL,GAAcA,MAAd;;AAEA,SAAKO,QAAL,GAAgB,yBACfC,YADe,CACF,wBADE,EACwB,KAAKJ,MAD7B,EAEfK,QAFe,CAEN,KAAKJ,WAFC,CAAhB;AAGH;;AAED;;;;;8BAGAK,K,oBACA;AACI,SAAKR,MAAL,CAAYS,MAAZ,GAAqB,CAArB;AACA,SAAKR,OAAL,CAAaQ,MAAb,GAAsB,CAAtB;AACH,G;;AAED;;;;;8BAGAC,M,qBACA;AACI,SAAKC,QAAL,GAAgB,IAAIC,YAAJ,CAAiB,KAAKZ,MAAtB,CAAhB;AACA,SAAKE,MAAL,CAAYW,MAAZ,CAAmB,KAAKF,QAAxB;;AAEA,SAAKG,SAAL,GAAiB,IAAIC,WAAJ,CAAgB,KAAKd,OAArB,CAAjB;AACA,SAAKE,WAAL,CAAiBU,MAAjB,CAAwB,KAAKC,SAA7B;;AAEN;AACM,SAAKV,KAAL,GAAa,KAAb;AACH,G;;AAED;;;;;8BAGAY,O,sBACA;AACI,SAAKjB,KAAL,GAAa,IAAb;AACA,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKC,OAAL,GAAe,IAAf;;AAEA,SAAKgB,GAAL,CAASD,OAAT;AACA,SAAKd,MAAL,CAAYc,OAAZ;AACA,SAAKb,WAAL,CAAiBa,OAAjB;;AAEA,SAAKnB,EAAL,GAAU,IAAV;;AAEA,SAAKK,MAAL,GAAc,IAAd;AACA,SAAKC,WAAL,GAAmB,IAAnB;;AAEA,SAAKQ,QAAL,GAAgB,IAAhB;AACA,SAAKG,SAAL,GAAiB,IAAjB;AACH,G;;;;;kBA1GgBlB,iB","file":"WebGLGraphicsData.js","sourcesContent":["import Geometry from '../../geometry/Geometry';\nimport Buffer from '../../geometry/Buffer';\n\n/**\n * An object containing WebGL specific properties to be used by the WebGL renderer\n *\n * @class\n * @private\n * @memberof PIXI\n */\nexport default class WebGLGraphicsData\n{\n    /**\n     * @param {WebGLRenderingContext} gl - The current WebGL drawing context\n     * @param {PIXI.Shader} shader - The shader\n     */\n    constructor(gl, shader)\n    {\n        /**\n         * The current WebGL drawing context\n         *\n         * @member {WebGLRenderingContext}\n         */\n        this.gl = gl;\n\n        // TODO does this need to be split before uploading??\n        /**\n         * An array of color components (r,g,b)\n         * @member {number[]}\n         */\n        this.color = [0, 0, 0]; // color split!\n\n        /**\n         * An array of points to draw\n         * @member {PIXI.Point[]}\n         */\n        this.points = [];\n\n        /**\n         * The indices of the vertices\n         * @member {number[]}\n         */\n        this.indices = [];\n        /**\n         * The main buffer\n         * @member {WebGLBuffer}\n         */\n        this.buffer = new Buffer();\n\n        /**\n         * The index buffer\n         * @member {WebGLBuffer}\n         */\n        this.indexBuffer = new Buffer();\n\n        /**\n         * Whether this graphics is dirty or not\n         * @member {boolean}\n         */\n        this.dirty = true;\n\n        /**\n         *\n         * @member {PIXI.Shader}\n         */\n        this.shader = shader;\n\n        this.geometry = new Geometry()\n        .addAttribute('aVertexPosition|aColor', this.buffer)\n        .addIndex(this.indexBuffer);\n    }\n\n    /**\n     * Resets the vertices and the indices\n     */\n    reset()\n    {\n        this.points.length = 0;\n        this.indices.length = 0;\n    }\n\n    /**\n     * Binds the buffers and uploads the data\n     */\n    upload()\n    {\n        this.glPoints = new Float32Array(this.points);\n        this.buffer.update(this.glPoints);\n\n        this.glIndices = new Uint16Array(this.indices);\n        this.indexBuffer.update(this.glIndices);\n\n  //     console.log(\"UPKOADING,.\",this.glPoints,this.glIndices)\n        this.dirty = false;\n    }\n\n    /**\n     * Empties all the data\n     */\n    destroy()\n    {\n        this.color = null;\n        this.points = null;\n        this.indices = null;\n\n        this.vao.destroy();\n        this.buffer.destroy();\n        this.indexBuffer.destroy();\n\n        this.gl = null;\n\n        this.buffer = null;\n        this.indexBuffer = null;\n\n        this.glPoints = null;\n        this.glIndices = null;\n    }\n}\n"]}