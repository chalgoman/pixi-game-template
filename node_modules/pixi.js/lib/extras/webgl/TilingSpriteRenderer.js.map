{"version":3,"sources":["../../../src/extras/webgl/TilingSpriteRenderer.js"],"names":["core","tempMat","Matrix","tempArray","Float32Array","TilingSpriteRenderer","renderer","uniforms","globals","globalUniforms","shader","Shader","from","simpleShader","quad","Quad","render","ts","vertices","_width","anchor","x","_height","y","uvRespectAnchor","uvs","tex","_texture","baseTex","baseTexture","lt","tileTransform","localTransform","uv","uvTransform","isSimple","isPowerOfTwo","frame","width","height","_glTextures","CONTEXT_UID","wrapMode","CLAMP","REPEAT","w","h","W","H","set","a","b","c","d","tx","ty","invert","prepend","mapCoord","uMapCoord","toArray","uClampFrame","uClampOffset","uTransform","color","utils","hex2rgb","tint","worldAlpha","uColor","translationMatrix","transform","worldTransform","uSampler","bind","geometry","state","setBlendMode","blendMode","draw","gl","TRIANGLES","ObjectRenderer","WebGLRenderer","registerPlugin"],"mappings":"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","file":"TilingSpriteRenderer.js","sourcesContent":["import * as core from '../../core';\nimport { WRAP_MODES } from '../../core/const';\nimport { readFileSync } from 'fs';\nimport { join } from 'path';\n\nconst tempMat = new core.Matrix();\nconst tempArray = new Float32Array(4);\n\n/**\n * WebGL renderer plugin for tiling sprites\n *\n * @class\n * @memberof PIXI.extras\n * @extends PIXI.ObjectRenderer\n */\nexport default class TilingSpriteRenderer extends core.ObjectRenderer\n{\n\n    /**\n     * constructor for renderer\n     *\n     * @param {WebGLRenderer} renderer The renderer this tiling awesomeness works for.\n     */\n    constructor(renderer)\n    {\n        super(renderer);\n\n        const uniforms = { globals: this.renderer.globalUniforms };\n\n        this.shader = new core.Shader.from(\n            readFileSync(join(__dirname, './tilingSprite.vert'), 'utf8'),\n            readFileSync(join(__dirname, './tilingSprite.frag'), 'utf8'),\n            uniforms);\n\n        this.simpleShader = new core.Shader.from(\n            readFileSync(join(__dirname, './tilingSprite.vert'), 'utf8'),\n            readFileSync(join(__dirname, './tilingSprite_simple.frag'), 'utf8'),\n            uniforms);\n\n        this.quad = new core.Quad();\n    }\n\n    /**\n     *\n     * @param {PIXI.extras.TilingSprite} ts tilingSprite to be rendered\n     */\n    render(ts)\n    {\n        const renderer = this.renderer;\n        const quad = this.quad;\n\n        let vertices = quad.vertices;\n\n        vertices[0] = vertices[6] = (ts._width) * -ts.anchor.x;\n        vertices[1] = vertices[3] = ts._height * -ts.anchor.y;\n\n        vertices[2] = vertices[4] = (ts._width) * (1.0 - ts.anchor.x);\n        vertices[5] = vertices[7] = ts._height * (1.0 - ts.anchor.y);\n\n        if (ts.uvRespectAnchor)\n        {\n            vertices = quad.uvs;\n\n            vertices[0] = vertices[6] = -ts.anchor.x;\n            vertices[1] = vertices[3] = -ts.anchor.y;\n\n            vertices[2] = vertices[4] = 1.0 - ts.anchor.x;\n            vertices[5] = vertices[7] = 1.0 - ts.anchor.y;\n        }\n\n        const tex = ts._texture;\n        const baseTex = tex.baseTexture;\n        const lt = ts.tileTransform.localTransform;\n        const uv = ts.uvTransform;\n        let isSimple = baseTex.isPowerOfTwo\n            && tex.frame.width === baseTex.width && tex.frame.height === baseTex.height;\n\n        // auto, force repeat wrapMode for big tiling textures\n        if (isSimple)\n        {\n            if (!baseTex._glTextures[renderer.CONTEXT_UID])\n            {\n                if (baseTex.wrapMode === WRAP_MODES.CLAMP)\n                {\n                    baseTex.wrapMode = WRAP_MODES.REPEAT;\n                }\n            }\n            else\n            {\n                isSimple = baseTex.wrapMode !== WRAP_MODES.CLAMP;\n            }\n        }\n\n        const shader = isSimple ? this.simpleShader : this.shader;\n\n        const w = tex.width;\n        const h = tex.height;\n        const W = ts._width;\n        const H = ts._height;\n\n        tempMat.set(lt.a * w / W,\n            lt.b * w / H,\n            lt.c * h / W,\n            lt.d * h / H,\n            lt.tx / W,\n            lt.ty / H);\n\n        // that part is the same as above:\n        // tempMat.identity();\n        // tempMat.scale(tex.width, tex.height);\n        // tempMat.prepend(lt);\n        // tempMat.scale(1.0 / ts._width, 1.0 / ts._height);\n\n        tempMat.invert();\n        if (isSimple)\n        {\n            tempMat.prepend(uv.mapCoord);\n\n        }\n        else\n        {\n            shader.uniforms.uMapCoord = uv.mapCoord.toArray(true);\n            shader.uniforms.uClampFrame = uv.uClampFrame;\n            shader.uniforms.uClampOffset = uv.uClampOffset;\n        }\n\n\n        shader.uniforms.uTransform = tempMat.toArray(true);\n\n        const color = tempArray;\n\n        core.utils.hex2rgb(ts.tint, color);\n        color[3] = ts.worldAlpha;\n        shader.uniforms.uColor = color;\n        shader.uniforms.translationMatrix = ts.transform.worldTransform.toArray(true);\n        shader.uniforms.uSampler = tex;\n\n        renderer.shader.bind(shader);\n        renderer.geometry.bind(quad)//, renderer.shader.getGLShader());\n        renderer.state.setBlendMode(ts.blendMode);\n\n        renderer.geometry.draw(this.renderer.gl.TRIANGLES, 6, 0);\n    }\n}\n\ncore.WebGLRenderer.registerPlugin('tilingSprite', TilingSpriteRenderer);\n"]}