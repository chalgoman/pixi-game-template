{"version":3,"sources":["../../src/mesh/Mesh.js"],"names":["core","meshProgram","Mesh","texture","vertices","uvs","indices","drawMode","geometry","Program","addAttribute","addIndex","getAttribute","static","uniforms","uSampler2","alpha","tint","Float32Array","Shader","data","_tint","blendMode","BLEND_MODES","NORMAL","_onTextureUpdate","value","utils","hex2rgb","state","_texture","baseTexture","hasLoaded","once"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;IAAYA,I;;AAEZ;;;;;;;;;;;;AAEA,IAAIC,oBAAJ;;AAEA;;;;;;;IAMqBC,I;;;AAEjB;;;;;;;AAOA,kBAAYC,OAAZ,EAAqBC,QAArB,EAA+BC,GAA/B,EAAoCC,OAApC,EAA6CC,QAA7C,EACA;AAAA;;AACI,YAAMC,WAAW,wBAAjB;;AAEA,YAAI,CAACP,WAAL,EACA;AACIA,0BAAc,IAAID,KAAKS,OAAT,gmBAAd;AAEH;;AAEDD,iBAASE,YAAT,CAAsB,iBAAtB,EAAyCN,QAAzC,EACCM,YADD,CACc,eADd,EAC+BL,GAD/B,EAECM,QAFD,CAEUL,OAFV;;AAIAE,iBAASI,YAAT,CAAsB,iBAAtB,EAAyCC,MAAzC,GAAkD,KAAlD;;AAEA,YAAMC,WAAW;AACbC,uBAAWZ,OADE;AAEba,mBAAO,CAFM;AAGbC,kBAAM,IAAIC,YAAJ,CAAiB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAjB;AAHO,SAAjB;;AAfJ,qDAqBI,oBAAMV,QAAN,EAAgB,IAAIR,KAAKmB,MAAT,CAAgBlB,WAAhB,EAA6Ba,QAA7B,CAAhB,EAAwD,IAAxD,EAA8DP,QAA9D,CArBJ;;AAuBI,cAAKF,GAAL,GAAWG,SAASI,YAAT,CAAsB,eAAtB,EAAuCQ,IAAlD;AACA,cAAKhB,QAAL,GAAgBI,SAASI,YAAT,CAAsB,iBAAtB,EAAyCQ,IAAzD;;AAEA,cAAKN,QAAL,GAAgBA,QAAhB;AACA,cAAKX,OAAL,GAAeA,OAAf;;AAEA,cAAKkB,KAAL,GAAa,QAAb;AACA,cAAKJ,IAAL,GAAY,QAAZ;;AAEA,cAAKK,SAAL,GAAiBtB,KAAKuB,WAAL,CAAiBC,MAAlC;AAhCJ;AAiCC;;AAEA;;;;;;;;;;AA2ED;;;;;mBAKAC,gB,+BACA;AACI;AACH,K;;;;4BA1ED;AACI,mBAAO,KAAKJ,KAAZ;AACH;;AAED;;;;;;0BAKSK,K,EACT;AACI,iBAAKL,KAAL,GAAaK,KAAb;AACA1B,iBAAK2B,KAAL,CAAWC,OAAX,CAAmB,KAAKP,KAAxB,EAA+B,KAAKP,QAAL,CAAcG,IAA7C;AACH;;AAED;;;;;;;;;;4BAQA;AACI,mBAAO,KAAKY,KAAL,CAAWP,SAAlB;AACH,S;0BAEaI,K,EAAO;AACrB;AACI,iBAAKG,KAAL,CAAWP,SAAX,GAAuBI,KAAvB;AACH;;AAED;;;;;;;;4BAMA;AACI,mBAAO,KAAKI,QAAZ;AACH,S;0BAEWJ,K,EAAO;AACnB;AACI,gBAAI,KAAKI,QAAL,KAAkBJ,KAAtB,EACA;AACI;AACH;;AAED,iBAAKI,QAAL,GAAgBJ,KAAhB;AACA,iBAAKZ,QAAL,CAAcC,SAAd,GAA0B,KAAKZ,OAA/B;;AAEA,gBAAIuB,KAAJ,EACA;AACI;AACA,oBAAIA,MAAMK,WAAN,CAAkBC,SAAtB,EACA;AACI,yBAAKP,gBAAL;AACH,iBAHD,MAKA;AACIC,0BAAMO,IAAN,CAAW,QAAX,EAAqB,KAAKR,gBAA1B,EAA4C,IAA5C;AACH;AACJ;AACJ;;;;;;kBAtHgBvB,I","file":"Mesh.js","sourcesContent":["import RawMesh from './RawMesh';\nimport Geometry from '../core/geometry/Geometry';\nimport * as core from '../core';\nimport { readFileSync } from 'fs';\nimport { join } from 'path';\n\nlet meshProgram;\n\n/**\n * Base mesh class\n * @class\n * @extends PIXI.Container\n * @memberof PIXI.mesh\n */\nexport default class Mesh extends RawMesh\n{\n    /**\n     * @param {PIXI.Texture} texture - The texture to use\n     * @param {Float32Array} [vertices] - if you want to specify the vertices\n     * @param {Float32Array} [uvs] - if you want to specify the uvs\n     * @param {Uint16Array} [indices] - if you want to specify the indices\n     * @param {number} [drawMode] - the drawMode, can be any of the Mesh.DRAW_MODES consts\n     */\n    constructor(texture, vertices, uvs, indices, drawMode)\n    {\n        const geometry = new Geometry();\n\n        if (!meshProgram)\n        {\n            meshProgram = new core.Program(readFileSync(join(__dirname, './webgl/mesh.vert'), 'utf8'),\n                                           readFileSync(join(__dirname, './webgl/mesh.frag'), 'utf8'));\n        }\n\n        geometry.addAttribute('aVertexPosition', vertices)\n        .addAttribute('aTextureCoord', uvs)\n        .addIndex(indices);\n\n        geometry.getAttribute('aVertexPosition').static = false;\n\n        const uniforms = {\n            uSampler2: texture,\n            alpha: 1,\n            tint: new Float32Array([1, 1, 1]),\n        };\n\n        super(geometry, new core.Shader(meshProgram, uniforms), null, drawMode);\n\n        this.uvs = geometry.getAttribute('aTextureCoord').data;\n        this.vertices = geometry.getAttribute('aVertexPosition').data;\n\n        this.uniforms = uniforms;\n        this.texture = texture;\n\n        this._tint = 0xFFFFFF;\n        this.tint = 0xFFFFFF;\n\n        this.blendMode = core.BLEND_MODES.NORMAL;\n    }\n\n     /**\n     * The tint applied to the Rope. This is a hex value. A value of\n     * 0xFFFFFF will remove any tint effect.\n     *\n     * @member {number}\n     * @memberof PIXI.Sprite#\n     * @default 0xFFFFFF\n     */\n    get tint()\n    {\n        return this._tint;\n    }\n\n    /**\n     * Sets the tint of the rope.\n     *\n     * @param {number} value - The value to set to.\n     */\n    set tint(value)\n    {\n        this._tint = value;\n        core.utils.hex2rgb(this._tint, this.uniforms.tint);\n    }\n\n    /**\n     * The blend mode to be applied to the sprite. Set to `PIXI.BLEND_MODES.NORMAL` to remove any blend mode.\n     *\n     * @member {number}\n     * @default PIXI.BLEND_MODES.NORMAL\n     * @see PIXI.BLEND_MODES\n     */\n    get blendMode()\n    {\n        return this.state.blendMode;\n    }\n\n    set blendMode(value) // eslint-disable-line require-jsdoc\n    {\n        this.state.blendMode = value;\n    }\n\n    /**\n     * The texture that the mesh uses.\n     *\n     * @member {PIXI.Texture}\n     */\n    get texture()\n    {\n        return this._texture;\n    }\n\n    set texture(value) // eslint-disable-line require-jsdoc\n    {\n        if (this._texture === value)\n        {\n            return;\n        }\n\n        this._texture = value;\n        this.uniforms.uSampler2 = this.texture;\n\n        if (value)\n        {\n            // wait for the texture to load\n            if (value.baseTexture.hasLoaded)\n            {\n                this._onTextureUpdate();\n            }\n            else\n            {\n                value.once('update', this._onTextureUpdate, this);\n            }\n        }\n    }\n\n    /**\n     * When the texture is updated, this event will fire to update the scale and frame\n     *\n     * @private\n     */\n    _onTextureUpdate()\n    {\n        /* empty */\n    }\n}\n"]}