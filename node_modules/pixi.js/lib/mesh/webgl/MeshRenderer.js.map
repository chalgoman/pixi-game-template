{"version":3,"sources":["../../../src/mesh/webgl/MeshRenderer.js"],"names":["core","MeshRenderer","renderer","shader","contextChange","gl","CONTEXT_UID","render","mesh","program","uniformData","translationMatrix","uniforms","transform","worldTransform","toArray","bind","state","setState","geometry","draw","drawMode","size","start","instanceCount","ObjectRenderer","WebGLRenderer","registerPlugin"],"mappings":";;;;AAAA;;IAAYA,I;;;;;;;;;;AAEZ;;;;;;;IAOqBC,Y;;;AAGjB;;;;;AAKA,0BAAYC,QAAZ,EACA;AAAA;;AAAA,qDACI,gCAAMA,QAAN,CADJ;;AAGI,cAAKC,MAAL,GAAc,IAAd;AAHJ;AAIC;;AAED;;;;;;;2BAKAC,a,4BACA;AACI,aAAKC,EAAL,GAAU,KAAKH,QAAL,CAAcG,EAAxB;AACA,aAAKC,WAAL,GAAmB,KAAKJ,QAAL,CAAcI,WAAjC;AACH,K;;AAED;;;;;;;2BAKAC,M,mBAAOC,I,EACP;AACI;;AAEA;AACA;AACA;AACA;AACA,YAAIA,KAAKL,MAAL,CAAYM,OAAZ,CAAoBC,WAApB,CAAgCC,iBAApC,EACA;AACI;AACAH,iBAAKL,MAAL,CAAYS,QAAZ,CAAqBD,iBAArB,GAAyCH,KAAKK,SAAL,CAAeC,cAAf,CAA8BC,OAA9B,CAAsC,IAAtC,CAAzC;AACH;;AAED;AACA,aAAKb,QAAL,CAAcC,MAAd,CAAqBa,IAArB,CAA0BR,KAAKL,MAA/B;;AAEA;AACA,aAAKD,QAAL,CAAce,KAAd,CAAoBC,QAApB,CAA6BV,KAAKS,KAAlC;;AAEA;AACA,aAAKf,QAAL,CAAciB,QAAd,CAAuBH,IAAvB,CAA4BR,KAAKW,QAAjC,EAA2CX,KAAKL,MAAhD;AACA;AACA,aAAKD,QAAL,CAAciB,QAAd,CAAuBC,IAAvB,CAA4BZ,KAAKa,QAAjC,EAA2Cb,KAAKc,IAAhD,EAAsDd,KAAKe,KAA3D,EAAkEf,KAAKW,QAAL,CAAcK,aAAhF;AACH,K;;;EAvDqCxB,KAAKyB,c;;kBAA1BxB,Y;;;AA0DrBD,KAAK0B,aAAL,CAAmBC,cAAnB,CAAkC,MAAlC,EAA0C1B,YAA1C","file":"MeshRenderer.js","sourcesContent":["import * as core from '../../core';\n\n/**\n * WebGL renderer plugin for tiling sprites\n *\n * @class\n * @memberof PIXI\n * @extends PIXI.ObjectRenderer\n */\nexport default class MeshRenderer extends core.ObjectRenderer\n{\n\n    /**\n     * constructor for renderer\n     *\n     * @param {WebGLRenderer} renderer The renderer this tiling awesomeness works for.\n     */\n    constructor(renderer)\n    {\n        super(renderer);\n\n        this.shader = null;\n    }\n\n    /**\n     * Sets up the renderer context and necessary buffers.\n     *\n     * @private\n     */\n    contextChange()\n    {\n        this.gl = this.renderer.gl;\n        this.CONTEXT_UID = this.renderer.CONTEXT_UID;\n    }\n\n    /**\n     * renders mesh\n     * @private\n     * @param {PIXI.mesh.RawMesh} mesh mesh instance\n     */\n    render(mesh)\n    {\n        // bind the shader..\n\n        // TODO\n        // set the shader props..\n        // probably only need to set once!\n        // as its then a refference..\n        if (mesh.shader.program.uniformData.translationMatrix)\n        {\n            // the transform!\n            mesh.shader.uniforms.translationMatrix = mesh.transform.worldTransform.toArray(true);\n        }\n\n        // bind and sync uniforms..\n        this.renderer.shader.bind(mesh.shader);\n\n        // set state..\n        this.renderer.state.setState(mesh.state);\n\n        // bind the geometry...\n        this.renderer.geometry.bind(mesh.geometry, mesh.shader);\n        // then render it\n        this.renderer.geometry.draw(mesh.drawMode, mesh.size, mesh.start, mesh.geometry.instanceCount);\n    }\n}\n\ncore.WebGLRenderer.registerPlugin('mesh', MeshRenderer);\n"]}